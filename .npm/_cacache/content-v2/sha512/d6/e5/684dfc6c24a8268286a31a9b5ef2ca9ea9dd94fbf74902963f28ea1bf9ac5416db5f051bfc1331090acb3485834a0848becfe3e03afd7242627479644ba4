{"_id":"use-clipboard-copy","_rev":"14-d9d47a45d42277ab93ca9eb673a47b0c","name":"use-clipboard-copy","dist-tags":{"beta":"0.2.0-beta.3","latest":"0.2.0"},"versions":{"0.0.1":{"name":"use-clipboard-copy","version":"0.0.1","description":"React hook to copy text to clipboard","main":"dist/index.js","types":"dist/index.d.ts","repository":{"type":"git","url":"git+https://github.com/wsmd/use-clipboard-copy.git"},"homepage":"https://github.com/wsmd/use-clipboard-copy","bugs":{"url":"https://github.com/wsmd/use-clipboard-copy/issues"},"author":{"name":"Waseem Dahman","email":"dwaseem@icloud.com"},"license":"MIT","scripts":{"typecheck":"tsc --noEmit","lint":"tslint --project .","test":"jest","build":"tsc","prebuild":"rm -rf dist","prepack":"yarn typecheck && yarn lint && yarn test"},"keywords":["react","react-hooks","copy-to-clipboard","clipboard-js","copy","cut","hook"],"prettier":{"trailingComma":"all","singleQuote":true},"jest":{"watchPathIgnorePatterns":["dist"]},"peerDependencies":{"react":"^16.8.0"},"dependencies":{"clipboard-copy":"^3.0.0"},"devDependencies":{"@types/jest":"^24.0.11","@types/react":"^16.8.10","jest":"^24.7.0","react":"^16.8.6","react-dom":"^16.8.6","tslint":"^5.15.0","typescript":"^3.4.1"},"gitHead":"c5bb055d7b34c054acf09767df2e70d8be038e4e","_id":"use-clipboard-copy@0.0.1","_nodeVersion":"10.15.2","_npmVersion":"6.7.0","dist":{"integrity":"sha512-6Z2aFcHbQDfoEYNay+2JXXFQDBGrB7OEvYz3vbXB0XZV8SXb0OIzF8bDtPvikBDRVODNIe+8Nk/5CkWA5/UO8w==","shasum":"2b5d9254d5ac48058db644d240db26b7a0d653a0","tarball":"https://registry.npmjs.org/use-clipboard-copy/-/use-clipboard-copy-0.0.1.tgz","fileCount":18,"unpackedSize":5411976,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJcpXTBCRA9TVsSAnZWagAAwX0P/0XTav38ZnkZjhH1D2+z\nWu8B7+9Obw2xmE6UkNbOkSze2g0HKrbD06j0BJpl+ysuaUiKEiA8QupB2XlM\nWwzw2UioA+ukV3HnBL7RuQdCeQfVtw0L4bt2iEaEWo1CHUYuC7VxJjt3D9di\nmXoMGZplfv8M9bg6Abj9gAsRWytY9T3sViZU3k3HSE3Fd5M3cdQV1HXV4VGq\n9ay1COz8ERRCLCVFu8osFNUrGNUgVsRAxxAVikOMs6QuMXJTA9Pb6Il7hOQs\nXYho10sThFCjK6CUtasv8In7+RclMmKFcRacFOdiz4zZ4NhLtoSo0ZkCHt7o\nQeEy+8jN//FDzsg71jyH8itGoMc/9fel1nef/qvvzjVWh1oi80k46vWnuCYO\nQPe/bTUqVXh5u9aCiWNXyYHsIpWYnn3RX3LDrvFAlId8PCXduRqInEFCztVk\nl2urXL6GLMHFhNXFdC2jDxyEefBVP5iMakbKioEuFmAJzyfd1xXRT3cGQCDA\nHY46gGxCQL9TXq8jPPglqBvfk2k9DxZAzBIj+d47tkqgplHHsV2CljCxt29+\nB3JwY2uTNhBnFvhF6oXcGjaZGQCoOTc6QZfXtCRcyb3SsYD56WFaO/zz5OQk\n9wFsDR6g7KZhMTzMnrY0n1uTR7f+9WDUAf70Y68ssx/XusugC9Av+5+53ibo\n21F3\r\n=5Err\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQC0akXLEqS+Xa+m6ht8Ldd4s4KKVQvWzpIX5a3wDtFDagIhAMkVn6jktEmwfXEBfnnMFGepF6vI/iPcTYvfHTKgn9jN"}]},"maintainers":[{"name":"wsmd","email":"dwaseem@icloud.com"}],"_npmUser":{"name":"wsmd","email":"dwaseem@icloud.com"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/use-clipboard-copy_0.0.1_1554347200827_0.17671476141199083"},"_hasShrinkwrap":false},"0.1.0-beta.0":{"name":"use-clipboard-copy","version":"0.1.0-beta.0","description":"Lightweight copy to clipboard hook for React","main":"dist/index.js","types":"dist/index.d.ts","repository":{"type":"git","url":"git+https://github.com/wsmd/use-clipboard-copy.git"},"homepage":"https://github.com/wsmd/use-clipboard-copy","bugs":{"url":"https://github.com/wsmd/use-clipboard-copy/issues"},"author":{"name":"Waseem Dahman","email":"dwaseem@icloud.com"},"license":"MIT","scripts":{"typecheck":"tsc --noEmit","lint":"tslint --project .","test":"jest","build":"tsc","prebuild":"rm -rf dist","prepack":"yarn typecheck && yarn lint && yarn test"},"keywords":["react","react-hooks","copy-to-clipboard","clipboard-js","copy","cut","hook"],"prettier":{"trailingComma":"all","singleQuote":true},"jest":{"watchPathIgnorePatterns":["dist"]},"peerDependencies":{"react":"^16.8.0"},"dependencies":{"clipboard-copy":"^3.0.0"},"devDependencies":{"@types/jest":"^24.0.11","@types/react":"^16.8.10","jest":"^24.7.0","react":"^16.8.6","react-dom":"^16.8.6","tslint":"^5.15.0","typescript":"^3.4.1"},"readme":"<h1 align=\"center\">\n  <img src=\"https://user-images.githubusercontent.com/2100222/55596467-9c054980-5716-11e9-8723-b8c286fcd9e3.png\" width=\"128\">\n  <br>\n  use-clipboard-copy\n</h1>\n\n<p align=\"center\">\n  <a href=\"https://www.npmjs.com/package/use-clipboard-copy\">\n    <img src=\"https://img.shields.io/npm/v/use-clipboard-copy.svg\" alt=\"Current Release\" />\n  </a>\n  <a href=\"https://travis-ci.org/wsmd/use-clipboard-copy\">\n    <img src=\"https://travis-ci.org/wsmd/use-clipboard-copy.svg?branch=master\" alt=\"CI Build\">\n  </a>\n  <a href=\"https://github.com/wsmd/use-clipboard-copy/blob/master/LICENSE\">\n    <img src=\"https://img.shields.io/github/license/wsmd/use-clipboard-copy.svg\" alt=\"Licence\">\n  </a>\n</p>\n\n<details>\n<summary>ðŸ“– Table of Contents</summary>\n<p>\n\n- [Motivation](#motivation)\n- [Getting Started](#getting-started)\n- [Examples](#examples)\n  - [Copying Text of Another Target Element](#copying-text-of-another-target-element)\n  - [Displaying a temporary \"copied\" state](#displaying-a-temporary-copied-state)\n  - [Copying Text Without a Target Element](#copying-text-without-a-target-element)\n- [API](#api)\n- [Browser Support](#browser-support)\n- [Acknowledgements](#acknowledgements)\n- [License](#license)\n\n</p>\n</details>\n\n## Motivation\n\nThere are many copy-to-clipboard solutions for Javascript â€“ really good solutions. Some of these solutions can feel out of place when it comes to implementing them with React... they do not feel very _React-y_.\n\n`use-clipboard-copy` is a **lightweight** React hook that makes it possible to add a copy-to-clipboard functionality to your user interface with very little code! A simple implementation looks like this:\n\n```js\nfunction CopyText() {\n  const clipboard = useClipboard();\n  return (\n    <>\n      <input {...clipboard.target()} />\n      <button {...clipboard.trigger()}>Copy</button>\n    </>\n  );\n}\n```\n\nP.S. You can still do more with `use-clipboard-copy`. Keep reading!\n\n## Getting Started\n\n> _Warning: Please note that this is still under active development. The current API is experimental and likely to change in a future release. Use with caution!_\n\nTo get started, add `use-clipboard-copy` to your project:\n\n```\nnpm install --save use-clipboard-copy\n```\n\nPlease note that `use-clipboard-copy` requires `react@^16.8.0` as a peer dependency.\n\n## Examples\n\n### Copying Text of Another Target Element\n\nA simple copy-to-clipboard interface can consist of two parts:\n\n- The target: the element who holds the value to be copied.\n- The trigger: the element that triggers the copy action.\n\n```jsx\nimport { useClipboard } from 'use-clipboard-copy';\n\nexport default function PublicUrl({ url }) {\n  const clipboard = useClipboard();\n  return (\n    <div>\n      <input {...clipboard.target()} value={url} readOnly />\n      <button {...clipboard.trigger()}>Copy Shareable Link</button>\n    </div>\n  );\n}\n```\n\n### Displaying a temporary \"copied\" state\n\nSometimes it can be helpful to notify users that the text was successfully copied to the clipboard. For example, displaying a temporary \"Copied\" state after they trigger the copy action.\n\n```jsx\nimport { useClipboard } from 'use-clipboard-copy';\n\nexport default function PublicUrl({ url }) {\n  const clipboard = useClipboard({\n    copiedTimeout: 600, // timeout duration in milliseconds\n  });\n  return (\n    <div>\n      <input {...clipboard.target()} value={url} readOnly />\n      <button {...clipboard.trigger()}>\n        {clipboard.copied ? 'Copied' : 'Copy Link'}\n      </button>\n    </div>\n  );\n}\n```\n\n### Copying Text Without a Target Element\n\nSome user interfaces might consist of only a simple copy-to-clipboard button without any values displayed to the user.\n\n<!-- prettier-ignore -->\n```jsx\nimport { useClipboard } from 'use-clipboard-copy';\n\nexport default function PublicUrl({ url }) {\n  const clipboard = useClipboard();\n  return (\n    <button onClick={() => clipboard.copy(url)}>\n      Copy Shareable Link\n    </button>\n  );\n}\n```\n\nUse `clipboard.copy` as a way to perform copy-to-clipboard action imperatively. For example, an async copy-to-clipboard operation would look something like this:\n\n<!-- prettier-ignore -->\n```jsx\nimport { useClipboard } from 'use-clipboard-copy';\n\nexport default function PublicUrl({ id }) {\n  const clipboard = useClipboard();\n\n  const handleClick = React.useCallback(async () => {\n    const url = await fakeAPI.getShareableLink(id);\n    clipboard.copy(url);\n  });\n\n  return (\n    <button onClick={handleClick}>Copy Shareable Link</button>\n  );\n}\n```\n\n## API\n\nStill under active development...\n\n## Browser Support\n\nChrome, Firefox, Edge, Safari, IE11.\n\n## Acknowledgements\n\nThis hook is powered by [clipboard-copy](https://github.com/feross/clipboard-copy), the lightweight copy to clipboard for the web.\n\n## License\n\nMIT\n","readmeFilename":"README.md","gitHead":"9dab03800df3193878bd4fcf6a3eeafdd03cdc77","_id":"use-clipboard-copy@0.1.0-beta.0","_nodeVersion":"10.15.2","_npmVersion":"6.7.0","dist":{"integrity":"sha512-FYnUV9i6TadudwOw7tvrtJjgZF8YUC4pot7aoGaq/70MbToemrIUNVCVv+Rrifxzfyk/A4G2FjvS6f/WYfAxUA==","shasum":"b657c63abc919235d915df9020a2994c525896c5","tarball":"https://registry.npmjs.org/use-clipboard-copy/-/use-clipboard-copy-0.1.0-beta.0.tgz","fileCount":10,"unpackedSize":14301,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJcprhNCRA9TVsSAnZWagAAYfMQAJBqfJY8Glsy+2U6EiLu\n9DaWMQ1NeaSwiG/RsYJW4hZfgYKwRs40RNtaQZIf4yOT/znx6T42funM3V79\nYNyC+8dbnSIOvIr+2F+CAvFttwN1Vk5B7dfArInnPi2eWNa4CrtPNsCYLx2J\nOXvdl4ObkFkAODJztKDN9NjpXREA41Y4oTg9HYSRyJJClFReLAzMbmloyBGe\nREEk/7D/3X87n2U0ogwUw32b8Ea6vU3AOkNcM4nnW8mVebqqhuZGR4x+hYIb\nZRaoxHR3cVUFq3gJdAqRYWQAFJyq4N9yoM+cOY/5R9qOyQQKksYg+EdCu/Pa\nywFb/d6+ScHpXSxLIqEFcKQUKIKD6bL8scrYRNnnqLrBoTFX3KGj+hgeJozJ\nSyRtx7WZX3JqBqrIegVeqE39kKyY/yzQQnclGbyQZqM01XfB6t17EaW8a7LG\n9MohsRh1RuT+0ZfJ8klqC41sQCLeNjJ1oaNZ6UclUtJqbuXeTKYiUKprd7wR\nIJzDErKNVt5+yMJ/CQPMU5oDzTmaMkeytvjpUhBQM2f5aQEhxDVOTiDhJYNo\nImDkDlSH5egMOVRTMzOw6QDYpAp6OEB28LM4QzU5fieB773Xk52BqaPnAtm+\nKZJ+kvXl26X/0mNK65m6Qo6V5FTkh1z2kUtU/oIETjzlrDkvEeXYcBBQPX07\nbntk\r\n=ImcV\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIEGSI4FknGa4w4KfS4SduxScqfb7H0lB2bDU1ap8C8ZMAiEAwo30kAQXh8Q+OGJF4NcnRUHbrgLvNffG5WL8youoJg4="}]},"maintainers":[{"name":"wsmd","email":"dwaseem@icloud.com"}],"_npmUser":{"name":"wsmd","email":"dwaseem@icloud.com"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/use-clipboard-copy_0.1.0-beta.0_1554430028806_0.6128315336011532"},"_hasShrinkwrap":false},"0.1.0-beta.1":{"name":"use-clipboard-copy","version":"0.1.0-beta.1","description":"Lightweight copy to clipboard hook for React","main":"dist/index.js","types":"dist/index.d.ts","repository":{"type":"git","url":"git+https://github.com/wsmd/use-clipboard-copy.git"},"homepage":"https://github.com/wsmd/use-clipboard-copy","bugs":{"url":"https://github.com/wsmd/use-clipboard-copy/issues"},"author":{"name":"Waseem Dahman","email":"dwaseem@icloud.com"},"license":"MIT","scripts":{"typecheck":"tsc --noEmit","lint":"tslint --project .","test":"jest","test:all":"yarn typecheck && yarn lint && yarn test","build":"tsc","prebuild":"rm -rf dist","prepack":"yarn test:all && yarn build"},"keywords":["react","react-hooks","copy-to-clipboard","clipboard-js","copy","cut","hook"],"prettier":{"trailingComma":"all","singleQuote":true},"jest":{"watchPathIgnorePatterns":["dist"]},"peerDependencies":{"react":"^16.8.0"},"dependencies":{"clipboard-copy":"^3.0.0"},"devDependencies":{"@types/jest":"^24.0.11","@types/react":"^16.8.10","jest":"^24.7.0","react":"^16.8.6","react-dom":"^16.8.6","tslint":"^5.15.0","typescript":"^3.4.1"},"readme":"<h1 align=\"center\">\n  <img src=\"https://user-images.githubusercontent.com/2100222/55596467-9c054980-5716-11e9-8723-b8c286fcd9e3.png\" width=\"128\">\n  <br>\n  use-clipboard-copy\n</h1>\n\n<p align=\"center\">\n  <a href=\"https://www.npmjs.com/package/use-clipboard-copy\">\n    <img src=\"https://img.shields.io/npm/v/use-clipboard-copy.svg\" alt=\"Current Release\" />\n  </a>\n  <a href=\"https://travis-ci.org/wsmd/use-clipboard-copy\">\n    <img src=\"https://travis-ci.org/wsmd/use-clipboard-copy.svg?branch=master\" alt=\"CI Build\">\n  </a>\n  <a href=\"https://github.com/wsmd/use-clipboard-copy/blob/master/LICENSE\">\n    <img src=\"https://img.shields.io/github/license/wsmd/use-clipboard-copy.svg\" alt=\"Licence\">\n  </a>\n</p>\n\n<details>\n<summary>ðŸ“– Table of Contents</summary>\n<p>\n\n- [Motivation](#motivation)\n- [Getting Started](#getting-started)\n- [Examples](#examples)\n  - [Copying Text of Another Target Element](#copying-text-of-another-target-element)\n  - [Copying Text Imperatively (Without a Target Element)](#copying-text-imperatively-without-a-target-element)\n  - [Displaying a temporary \"copied\" state](#displaying-a-temporary-copied-state)\n- [Browser Support](#browser-support)\n- [Acknowledgements](#acknowledgements)\n- [License](#license)\n\n</p>\n</details>\n\n## Motivation\n\nThere are many copy-to-clipboard solutions for Javascript â€“ really good solutions, but some of these them can feel out of place when it comes to implementing getting them to work with React... they do not feel very _React-y_.\n\n`use-clipboard-copy` is a **lightweight** React hook that makes it possible to add a copy-to-clipboard functionality to your user interface with very little code! A simple implementation looks like this:\n\n```js\nfunction CopyText() {\n  const clipboard = useClipboard();\n  return (\n    <div>\n      <input ref={clipboard.target} />\n      <button onClick={clipboard.copy}>Copy</button>\n    </div>\n  );\n}\n```\n\nP.S. You can do more than that with `use-clipboard-copy`. Keep reading!\n\n## Getting Started\n\n> _Warning: Please note that this is still under active development. The current API is experimental and likely to change in a future release. Use with caution!_\n\nTo get started, add `use-clipboard-copy` to your project:\n\n```\nnpm install --save use-clipboard-copy\n```\n\nPlease note that `use-clipboard-copy` requires `react@^16.8.0` as a peer dependency.\n\n## Examples\n\n### Copying Text of Another Target Element\n\nA simple copy-to-clipboard interface consists of two parts:\n\n- The `target`, the element who holds the value to be copied, usually an input.\n- The `copy` action.\n\n```jsx\nimport { useClipboard } from 'use-clipboard-copy';\n\nexport default function PublicUrl({ url }) {\n  const clipboard = useClipboard();\n  return (\n    <div>\n      <input ref={clipboard.target} value={url} readOnly />\n      <button onClick={clipboard.copy}>Copy Shareable Link</button>\n    </div>\n  );\n}\n```\n\n### Copying Text Imperatively (Without a Target Element)\n\nA copy-to-clipboard interface might consist of a simple copy button only - without any additional inputs or values displayed to the user. This can be done by passing a string to the `clipboard.copy` action.\n\n<!-- prettier-ignore -->\n```jsx\nimport { useClipboard } from 'use-clipboard-copy';\n\nexport default function PublicUrl({ url }) {\n  const clipboard = useClipboard();\n  return (\n    <button onClick={() => clipboard.copy(url)}>\n      Copy Shareable Link\n    </button>\n  );\n}\n```\n\nUse `clipboard.copy` as a way to perform a copy action imperatively. For example, an async copy-to-clipboard operation would look something like this:\n\n<!-- prettier-ignore -->\n```jsx\nimport { useClipboard } from 'use-clipboard-copy';\n\nexport default function PublicUrl({ id }) {\n  const clipboard = useClipboard();\n\n  const handleClick = React.useCallback(async () => {\n    const url = await fakeAPI.getShareableLink(id);\n    clipboard.copy(url);\n  });\n\n  return (\n    <button onClick={handleClick}>Copy Shareable Link</button>\n  );\n}\n```\n\n### Displaying a temporary \"copied\" state\n\nSometimes it can be helpful to notify the user that the text was successfully copied to the clipboard, usually by displaying a temporary \"Copied\" state after they trigger the copy action.\n\nBy passing the `copiedTimeout` option to `useClipboard()`, you can use `clipboard.copied` as a way to toggle the copied state in the UI.\n\n```jsx\nimport { useClipboard } from 'use-clipboard-copy';\n\nexport default function PublicUrl({ url }) {\n  const clipboard = useClipboard({\n    copiedTimeout: 600, // timeout duration in milliseconds\n  });\n  return (\n    <div>\n      <input ref={clipboard.target} value={url} readOnly />\n      <button onClick={clipboard.copy}>\n        {clipboard.copied ? 'Copied' : 'Copy Link'}\n      </button>\n    </div>\n  );\n}\n```\n\n## Browser Support\n\nChrome, Firefox, Edge, Safari, IE11.\n\n## Acknowledgements\n\nThis hook is powered by [clipboard-copy](https://github.com/feross/clipboard-copy), the lightweight copy to clipboard for the web.\n\n## License\n\nMIT\n","readmeFilename":"README.md","gitHead":"1a7f22d7f4fb2e03e3a1b0e372851eb236a58c10","_id":"use-clipboard-copy@0.1.0-beta.1","_nodeVersion":"10.15.2","_npmVersion":"6.7.0","dist":{"integrity":"sha512-L/kz9oh9OavTHGShNQRmglxc+JKxfTWp7zUOzVyGRHE3VaiETYWOUPW8yuBmkJpYIRmSv1yu+YnPje4S7jXIcg==","shasum":"0cf52b0cc995e179ea30320388533b864e64df46","tarball":"https://registry.npmjs.org/use-clipboard-copy/-/use-clipboard-copy-0.1.0-beta.1.tgz","fileCount":9,"unpackedSize":10307,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJcp/nTCRA9TVsSAnZWagAAlTQP/jK/FdK0ShqyApMB3dbZ\nLfpbTFGyEu5CNpiK8MeRkUv/PlPgMkJ9YK1DG9XmaXQcCu1nxozQd3VtyjGF\nJi0f0VPZvz9U9ZLiR3gMUQ+n9QAeYohaF4hav25VZaS8qf9wYJFvvlGYmpL1\nvZAZ6o2PXa1sAMobKY16eYUP6Yx0HA/y1LHjJWdecGBljZcjnoFxjrwAh1MK\natd3Nskyis89AJIROClxsz8vj5lAX2/bo09aNTSzNjcapLVL2VPZdRoxBDTu\n45CSCwcq3Mw272WQ1I0Q1BE32z36HjVF/E7wdl5ciT/xZHbClR/zZNFAGlhQ\nrGjyYzkb4YfX784s4FPaL1OtLQ/jQ87DUzSgwE6ig3cjfJDFaU3KAapbu1WK\n9KlOzKumMKRfSN1GdmZuchm8tH5dxfZy71MX6R00oqrfCgaB3rniblfrXfCu\nfVZsK1iyfhNac8kvByUahd24KCDuXdridXrn0I1A5J6xLH4auUpjuAkLAH/v\nXBnl/kv67qEd/X0Ba8MGtM1qWO/TKNI+DPLWTqCBDT3m9TkhDgIiRxYtxNJZ\nqdPOjhWxN4IZNpxRIQBbbU6phX3E16Ud/2jdi3dNcCpnWHc7IeLT6wbFPpm0\n2KOFuLrwCAd7Qo/TWGaPABMERE79Pl47r38QVlPMnnrRtQSZagqg+6qglmCY\nJ/2K\r\n=k/WA\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCICxsBRz7FexK4HNKd880OUsubH67tuZFt95Je//12wKZAiEAlsYjxuDW/hz3VN7tR+MYLIMNTXrnKvJcej9UOpOBMKI="}]},"maintainers":[{"name":"wsmd","email":"dwaseem@icloud.com"}],"_npmUser":{"name":"wsmd","email":"dwaseem@icloud.com"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/use-clipboard-copy_0.1.0-beta.1_1554512338614_0.32603063522833997"},"_hasShrinkwrap":false},"0.1.0-beta.2":{"name":"use-clipboard-copy","version":"0.1.0-beta.2","description":"Lightweight copy to clipboard hook for React","main":"dist/index.js","types":"dist/index.d.ts","repository":{"type":"git","url":"git+https://github.com/wsmd/use-clipboard-copy.git"},"homepage":"https://github.com/wsmd/use-clipboard-copy","bugs":{"url":"https://github.com/wsmd/use-clipboard-copy/issues"},"author":{"name":"Waseem Dahman","email":"dwaseem@icloud.com"},"license":"MIT","scripts":{"typecheck":"tsc --noEmit","lint":"tslint --project .","test":"jest","test:all":"yarn typecheck && yarn lint && yarn test && yarn size","build":"tsc","prebuild":"rm -rf dist","prepack":"yarn test:all && yarn build","size":"yarn build --skipLibCheck && size-limit"},"keywords":["react","react-hooks","copy-to-clipboard","clipboard-js","copy","cut","hook"],"prettier":{"trailingComma":"all","singleQuote":true},"jest":{"watchPathIgnorePatterns":["dist"]},"size-limit":[{"path":"dist/*.js","limit":"800 B"}],"peerDependencies":{"react":"^16.8.0"},"dependencies":{"clipboard-copy":"^3.0.0"},"devDependencies":{"@types/jest":"^24.0.11","@types/react":"^16.8.10","jest":"^24.7.0","react":"^16.8.6","react-dom":"^16.8.6","size-limit":"^1.0.1","tslint":"^5.15.0","typescript":"^3.4.1"},"gitHead":"f0dd86d5958162ef89fa85b629224f7609634c6a","readme":"<h1 align=\"center\">\n  <img src=\"https://user-images.githubusercontent.com/2100222/55596467-9c054980-5716-11e9-8723-b8c286fcd9e3.png\" width=\"128\">\n  <br>\n  use-clipboard-copy\n</h1>\n\n<p align=\"center\">\n  <a href=\"https://www.npmjs.com/package/use-clipboard-copy\">\n    <img src=\"https://img.shields.io/npm/v/use-clipboard-copy.svg\" alt=\"Current Release\" />\n  </a>\n  <a href=\"https://travis-ci.org/wsmd/use-clipboard-copy\">\n    <img src=\"https://travis-ci.org/wsmd/use-clipboard-copy.svg?branch=master\" alt=\"CI Build\">\n  </a>\n  <a href=\"https://github.com/wsmd/use-clipboard-copy/blob/master/LICENSE\">\n    <img src=\"https://img.shields.io/github/license/wsmd/use-clipboard-copy.svg\" alt=\"Licence\">\n  </a>\n</p>\n\n<details>\n<summary>ðŸ“– Table of Contents</summary>\n<p>\n\n- [Motivation](#motivation)\n- [Getting Started](#getting-started)\n- [Usage](#usage)\n  - [Copying Text of Another Target Element](#copying-text-of-another-target-element)\n  - [Copying Text Imperatively (Without a Target Element)](#copying-text-imperatively-without-a-target-element)\n  - [Displaying a Temporary Success State](#displaying-a-temporary-success-state)\n- [Browser Support](#browser-support)\n  - [Handling Errors](#handling-errors)\n- [API](#api)\n  - [`useClipboard(options?: UseClipboardOptions): ClipboardAPI`](#useclipboardoptions-useclipboardoptions-clipboardapi)\n  - [`UseClipboardOptions`](#useclipboardoptions)\n    - [`copiedTimeout?: number`](#copiedtimeout-number)\n    - [`onSuccess?: () => void`](#onsuccess---void)\n    - [`onError?: () => void`](#onerror---void)\n    - [`selectOnCopy?: boolean`](#selectoncopy-boolean)\n    - [`selectOnError?: boolean`](#selectonerror-boolean)\n  - [`ClipboardAPI`](#clipboardapi)\n    - [`copy: (text?: string) => void`](#copy-text-string--void)\n    - [`target: React.RefObject<any>`](#target-reactrefobjectany)\n    - [`isSupported: () => boolean`](#issupported---boolean)\n    - [`copied: boolean`](#copied-boolean)\n- [Acknowledgements](#acknowledgements)\n- [License](#license)\n\n</p>\n</details>\n\n## Motivation\n\nThere are various copy-to-clipboard solutions for Javascript â€“ really good ones, but getting them to work with React can feel a little odd... they don't feel very _React-y_.\n\n`use-clipboard-copy` is a **lightweight** (< 800 byte) React hook that makes it possible to add a copy-to-clipboard functionality to your React application with very little code! A simple implementation looks like this:\n\n```js\nfunction CopyText() {\n  const clipboard = useClipboard();\n  return (\n    <div>\n      <input ref={clipboard.target} />\n      <button onClick={clipboard.copy}>Copy</button>\n    </div>\n  );\n}\n```\n\nP.S. You can do more than that with `use-clipboard-copy`. Keep reading!\n\n## Getting Started\n\nTo get started, add `use-clipboard-copy` to your project:\n\n```\nnpm install --save use-clipboard-copy\n```\n\nPlease note that `use-clipboard-copy` requires `react@^16.8.0` as a peer dependency.\n\n## Usage\n\n### Copying Text of Another Target Element\n\nA simple copy-to-clipboard interface consists of two parts:\n\n- The `target`, an element who holds the value to be copied, usually an input.\n- The `copy` action.\n\n```jsx\nimport { useClipboard } from 'use-clipboard-copy';\n\nexport default function PublicUrl({ url }) {\n  const clipboard = useClipboard();\n  return (\n    <div>\n      <input ref={clipboard.target} value={url} readOnly />\n      <button onClick={clipboard.copy}>Copy Link</button>\n    </div>\n  );\n}\n```\n\n### Copying Text Imperatively (Without a Target Element)\n\nA copy-to-clipboard interface may consist of a single copy button without any additional inputs or values displayed to the user. By passing a string to the `clipboard.copy` action, the specified string will be copied to the clipboard.\n\n<!-- prettier-ignore -->\n```jsx\nimport { useClipboard } from 'use-clipboard-copy';\n\nexport default function PublicUrl({ url }) {\n  const clipboard = useClipboard();\n  return (\n    <button onClick={() => clipboard.copy(url)}>\n      Copy Link\n    </button>\n  );\n}\n```\n\nUse this as a way to perform a copy action imperatively. For example, an async copy-to-clipboard operation would look something like this:\n\n<!-- prettier-ignore -->\n```jsx\nimport { useClipboard } from 'use-clipboard-copy';\n\nexport default function PublicUrl({ id }) {\n  const clipboard = useClipboard();\n\n  const handleClick = React.useCallback(async () => {\n    const url = await fakeAPI.getShareableLink(id);\n    clipboard.copy(url);\n  }, []);\n\n  return (\n    <button onClick={handleClick}>Copy Link</button>\n  );\n}\n```\n\nPlease note that this async functionality will not work in all browsers.\n\n### Displaying a Temporary Success State\n\nSometimes it can be helpful to notify the user that the text was successfully copied to the clipboard, usually by displaying a temporary \"Copied\" state after they trigger the copy action.\n\nBy passing the `copiedTimeout` option to `useClipboard()`, you can use `clipboard.copied` as a way to toggle the copied state in the UI.\n\n```jsx\nimport { useClipboard } from 'use-clipboard-copy';\n\nexport default function PublicUrl({ url }) {\n  const clipboard = useClipboard({\n    copiedTimeout: 600, // timeout duration in milliseconds\n  });\n  return (\n    <div>\n      <input ref={clipboard.target} value={url} readOnly />\n      <button onClick={clipboard.copy}>\n        {clipboard.copied ? 'Copied' : 'Copy Link'}\n      </button>\n    </div>\n  );\n}\n```\n\n## Browser Support\n\n`use-clipboard-copy` is supported in all browsers that [supports the native clipboard APIs](https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/Interact_with_the_clipboard), including major browsers such as **Chrome, Firefox, Edge, Safari, IE11**.\n\nIn some edge cases, this hook provides an `isSupported` method that you can use to check for browser support and update the UI accordingly:\n\n```jsx\nfunction ClipboardSupport() {\n  const clipboard = useClipboard();\n  return (\n    <div>\n      {clipboard.isSupported()\n        ? \"yay! copy-to-clipboard is supported\"\n        : \"meh. copy-to-clipboard is not supported\"}\n    </div>\n  );\n}\n```\n\n### Handling Errors\n\nCopy to clipboard in browsers can be tricky some times - there are various reasons that can contribute to preventing the copy action from working. Therefore, you should always handle such cases.\n\nBy passing an `onSuccess` and `onError` callbacks to the `useClipboard` options, you will be able to handle whether the `copy` action was performed successfully.\n\n```js\nfunction CopyText() {\n  const clipboard = useClipboard({\n    onSuccess() {\n      console.log('Text was copied successfully!')\n    },\n    onError() {\n      console.log('Failed to copy text!')\n    }\n  });\n  return (\n    <div>\n      <input ref={clipboard.target} />\n      <button onClick={clipboard.copy}>Copy</button>\n    </div>\n  );\n}\n```\n\nIn case copy action failed to work, `useClipboard` will fail gracefully and select the `target` input instead so that users can copy the text manually. This behavior can be disabled by passing `selectOnError: false` to the clipboard options.\n\n## API\n\n### `useClipboard(options?: UseClipboardOptions): ClipboardAPI`\n\n`use-clipboard-copy` exposes a named export `useClipboard` which is the hook function itself. It takes an optional options object, and returns an object to control the clipboard.\n\n```js\nimport { useClipboard } from 'use-clipboard-copy';\n\nfunction CopyText() {\n  const clipboard = useClipboard();\n  return (\n    // ...\n  );\n}\n```\n\n### `UseClipboardOptions`\n\n`useClipboard` takes an optional object with the following properties:\n\n- [`copiedTimeout?: number`](#copiedtimeout-number)\n- [`onSuccess?: () => void`](#onsuccess---void)\n- [`onError?: () => void`](#onerror---void)\n- [`selectOnCopy?: boolean`](#selectoncopy-boolean)\n- [`selectOnError?: boolean`](#selectonerror-boolean)\n\n#### `copiedTimeout?: number`\n\nThe duration in milliseconds used to toggled the [`copied`](#copied-boolean) state upon a successful copy action.\n\n#### `onSuccess?: () => void`\n\nA callback function that will be called upon a successful copy action.\n\n#### `onError?: () => void`\n\nA callback function that will be called when the copy action fails.\n\n#### `selectOnCopy?: boolean`\n\nDefaults to `false`.\n\nA boolean indicating whether the text of the [`target`](#target-reactrefobjectany) element (if set) will be selected upon a successful copy action.\n\n#### `selectOnError?: boolean`\n\nDefaults to `true`.\n\nA boolean indicating whether the text of the [`target`](#target-reactrefobjectany) element (if set) will be selected when the copy action fails.\n\n### `ClipboardAPI`\n\n`useClipboard` returns an object with the following properties:\n\n- [`copied: boolean`](#copied-boolean)\n- [`copy: (text?: string) => void`](#copy-text-string--void)\n- [`isSupported: () => boolean`](#issupported---boolean)\n- [`target: React.RefObject<any>`](#target-reactrefobjectany)\n\n#### `copy: (text?: string) => void`\n\nA method that will be used to preform the copy action. If it's used without passing a string, the `copy` action will use the text of the [`target`](#target-reactrefobjectany) element (if set).\n\n```jsx\n<input ref={clipboard.target} value=\"a text to copy\" />;\n<button onClick={clipboard.copy} />;\n```\n\nOptionally, `copy` takes a `string` to perform the copy action imperatively (programmatically). When this is used, the [`target`](#target-reactrefobjectany) element (if set) will be ignored.\n\n```jsx\n<button onClick={() => clipboard.copy('a text to copy')} />;\n```\n\n#### `target: React.RefObject<any>`\n\nA React Ref object used on input and textarea elements that holds the text to be copied.\n\n```jsx\n<input ref={clipboard.target} value=\"a text to copy\" />;\n```\n\n#### `isSupported: () => boolean`\n\nA function that returns a boolean indicating whether the browser supports the clipboard APIs. Useful to deterministically update the UI if the browser does not support the clipboard functionality for whatever reason.\n\n#### `copied: boolean`\n\nA boolean indicating whether the copy action was just performed. Must be used with the [`copiedTimeout`](#copiedtimeout-number) option. Useful to update the UI to display temporary success state.\n\n## Acknowledgements\n\nThis hook is powered by [clipboard-copy](https://github.com/feross/clipboard-copy), the lightweight copy to clipboard for the web.\n\n## License\n\nMIT\n","readmeFilename":"README.md","_id":"use-clipboard-copy@0.1.0-beta.2","_nodeVersion":"10.15.2","_npmVersion":"6.7.0","dist":{"integrity":"sha512-n00lXUDxQmVJCenKG3Me3OzVh4YtRG4tfK0UVWfKecVRh142Bv5eoGv1aorZaZ5d1KGXKH8BKNl925lBE0sS5w==","shasum":"f512a42fc90f7d110cf7b2affe086f4707af7372","tarball":"https://registry.npmjs.org/use-clipboard-copy/-/use-clipboard-copy-0.1.0-beta.2.tgz","fileCount":9,"unpackedSize":16508,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJcqOwGCRA9TVsSAnZWagAAGioQAJ+1t0kfk8mFqpN+lk7A\nGgjf+DWmvAB9gNxmPtA6XJK2fKwAzo0kSbo3RlxSXHqPBEOPfHm2OnZn+AHT\nABC8TSf27VWAnBlY26+HPYDSAu3vxJPk4OgdPDEt2ebXx2Ow+zLSyo+NaQDu\ntpJjsmSsG+F/k//6NvO0KGTTQcO/qsKGorwKkxw3RBbyhF2Ln1sAfN8gPzdR\nam3SPNgueGJrcnBZ9O8ZFONzRIgVcA+4eil01q7lFbxpkYxfjSPGJLtsUTrg\nqe8WQr46bfxIoH/e/xMTKxDacd3WatPwWnGkI5CFeNBevwr1/G9vnBEkSEEi\nANmMldbyM8/VlWd+396lYRFgf09Z4ZViC2LrO0GQPZxBJ8rpEM1Mskb3tRQf\nSWgE7qBvWQ4VPZiccFFuMxU/S0bHo91Rr4nfrAIxwSvFvzPBVM3K/7eumk0O\nDMJ6DbcxxxK0xxMCD96wSpAoTyUIuWsEbI6FoaDrxnliEE/epITIeFxuL+BC\nWPG+y12BYnd4hJ2O3YhutV9vup6V2peZlJdiDw85eoWoX3k66BnV6VMLUqvT\nqPzIoc+d5HQ9vexyW1xeXmsNiYg14rQ/dPrO/wjFXLGg5CMzGFn1yY9ZkdSt\n6ApRg4I6SY1lVRWSx8dnzo8DCSpZ27LSdvJleMo4Sn0044i4oqXKLuW0sAtn\nKKsa\r\n=TUB/\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCxpQp9rsNe2mUe22TdyHIPMy26RGmc9qcT1Zh1aSCW3AIhAKsb0FrjT5lW+MPaS/mEefK6LlMOOxveqMJExKUHWqTP"}]},"maintainers":[{"name":"wsmd","email":"dwaseem@icloud.com"}],"_npmUser":{"name":"wsmd","email":"dwaseem@icloud.com"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/use-clipboard-copy_0.1.0-beta.2_1554574341338_0.790135616215011"},"_hasShrinkwrap":false},"0.1.0-beta.3":{"name":"use-clipboard-copy","version":"0.1.0-beta.3","description":"Lightweight copy to clipboard hook for React","main":"dist/index.js","types":"dist/index.d.ts","repository":{"type":"git","url":"git+https://github.com/wsmd/use-clipboard-copy.git"},"homepage":"https://github.com/wsmd/use-clipboard-copy","bugs":{"url":"https://github.com/wsmd/use-clipboard-copy/issues"},"author":{"name":"Waseem Dahman","email":"dwaseem@icloud.com"},"license":"MIT","scripts":{"typecheck":"tsc --noEmit","lint":"tslint --project .","test":"jest","test:coverage":"jest --coverage","test:all":"yarn typecheck && yarn lint && yarn test:coverage && yarn size","coveralls":"cat ./coverage/lcov.info | ./node_modules/coveralls/bin/coveralls.js","build":"tsc","prebuild":"rm -rf dist","prepack":"yarn test:all && yarn build","size":"yarn build --skipLibCheck && size-limit"},"keywords":["react","react-hooks","copy-to-clipboard","clipboard-js","copy","cut","hook"],"prettier":{"trailingComma":"all","singleQuote":true},"jest":{"watchPathIgnorePatterns":["dist"],"transform":{"^.+\\.tsx?$":"ts-jest"},"collectCoverageFrom":["src/**.ts"]},"size-limit":[{"path":"dist/*.js","limit":"800 B"}],"peerDependencies":{"react":"^16.8.0"},"dependencies":{"clipboard-copy":"^3.0.0"},"devDependencies":{"@types/jest":"^24.0.11","@types/react":"^16.8.10","coveralls":"^3.0.3","jest":"^24.7.0","react":"16.9.0-alpha.0","react-dom":"16.9.0-alpha.0","react-hooks-testing-library":"^0.4.0","react-testing-library":"^6.1.2","size-limit":"^1.0.1","ts-jest":"^24.0.2","tslint":"^5.15.0","typescript":"^3.4.1"},"readme":"<h1 align=\"center\">\n  <img src=\"https://user-images.githubusercontent.com/2100222/55596467-9c054980-5716-11e9-8723-b8c286fcd9e3.png\" width=\"128\">\n  <br>\n  use-clipboard-copy\n</h1>\n\n<p align=\"center\">\n  <a href=\"https://www.npmjs.com/package/use-clipboard-copy\">\n    <img src=\"https://img.shields.io/npm/v/use-clipboard-copy.svg\" alt=\"Current Release\" />\n  </a>\n  <a href=\"https://travis-ci.org/wsmd/use-clipboard-copy\">\n    <img src=\"https://travis-ci.org/wsmd/use-clipboard-copy.svg?branch=master\" alt=\"CI Build\">\n  </a>\n  <a href='https://coveralls.io/github/wsmd/use-clipboard-copy?branch=master'>\n    <img src='https://coveralls.io/repos/github/wsmd/use-clipboard-copy/badge.svg?branch=master' alt='Coverage Status' />\n  </a>\n  <a href=\"https://github.com/wsmd/use-clipboard-copy/blob/master/LICENSE\">\n    <img src=\"https://img.shields.io/github/license/wsmd/use-clipboard-copy.svg\" alt=\"Licence\">\n  </a>\n</p>\n\n<details>\n<summary>ðŸ“– Table of Contents</summary>\n<p>\n\n- [Motivation](#motivation)\n- [Getting Started](#getting-started)\n- [Usage](#usage)\n  - [Copying Text of Another Target Element](#copying-text-of-another-target-element)\n  - [Copying Text Imperatively (Without a Target Element)](#copying-text-imperatively-without-a-target-element)\n  - [Displaying a Temporary Success State](#displaying-a-temporary-success-state)\n  - [Handling Success and Errors](#handling-success-and-errors)\n- [Browser Support](#browser-support)\n- [API](#api)\n  - [`useClipboard(options?: UseClipboardOptions): ClipboardAPI`](#useclipboardoptions-useclipboardoptions-clipboardapi)\n  - [`UseClipboardOptions`](#useclipboardoptions)\n    - [`copiedTimeout?: number`](#copiedtimeout-number)\n    - [`onSuccess?: () => void`](#onsuccess---void)\n    - [`onError?: () => void`](#onerror---void)\n    - [`selectOnCopy?: boolean`](#selectoncopy-boolean)\n    - [`selectOnError?: boolean`](#selectonerror-boolean)\n  - [`ClipboardAPI`](#clipboardapi)\n    - [`copy: (text?: string) => void`](#copy-text-string--void)\n    - [`target: React.RefObject<any>`](#target-reactrefobjectany)\n    - [`isSupported: () => boolean`](#issupported---boolean)\n    - [`copied: boolean`](#copied-boolean)\n- [Acknowledgements](#acknowledgements)\n- [License](#license)\n\n</p>\n</details>\n\n## Motivation\n\nThere are various copy-to-clipboard solutions for Javascript â€“ really good ones, but getting them to work with React can feel a little odd... they don't feel very _React-y_.\n\n`use-clipboard-copy` is a **lightweight** (< 1KB) React hook that makes it possible to add a copy-to-clipboard functionality to your React application with very little code! A simple implementation looks like this:\n\n```js\nfunction CopyText() {\n  const clipboard = useClipboard();\n  return (\n    <div>\n      <input ref={clipboard.target} />\n      <button onClick={clipboard.copy}>Copy</button>\n    </div>\n  );\n}\n```\n\nP.S. You can do more than that with `use-clipboard-copy`. Keep reading!\n\n## Getting Started\n\nTo get started, add `use-clipboard-copy` to your project:\n\n```\nnpm install --save use-clipboard-copy\n```\n\nPlease note that `use-clipboard-copy` requires `react@^16.8.0` as a peer dependency.\n\n## Usage\n\n### Copying Text of Another Target Element\n\nA simple copy-to-clipboard interface consists of two parts:\n\n- The `target`, an element who holds the value to be copied, usually an input.\n- The `copy` action.\n\n```jsx\nimport { useClipboard } from 'use-clipboard-copy';\n\nexport default function PublicUrl({ url }) {\n  const clipboard = useClipboard();\n  return (\n    <div>\n      <input ref={clipboard.target} value={url} readOnly />\n      <button onClick={clipboard.copy}>Copy Link</button>\n    </div>\n  );\n}\n```\n\n### Copying Text Imperatively (Without a Target Element)\n\nIt is also possible to perform a copy action imperatively (programmatically). For example, a copy-to-clipboard interface may consist of a single copy button without any additional inputs or values displayed to the user. By passing a string to the `clipboard.copy` action, the specified string will be copied to the clipboard.\n\n```jsx\nimport { useClipboard } from 'use-clipboard-copy';\n\nexport default function PublicUrl({ id }) {\n  const clipboard = useClipboard();\n\n  const handleClick = React.useCallback(\n    () => {\n      const url = Utils.formatUrl({ query: { id } });\n      clipboard.copy(url); // programmatically copying a value\n    },\n    [clipboard.copy, id]\n  );\n\n  return (\n    <button onClick={handleClick}>Copy Link</button>\n  );\n}\n```\n\n### Displaying a Temporary Success State\n\nSometimes it can be helpful to notify the user that the text was successfully copied to the clipboard, usually by displaying a temporary \"Copied\" state after they trigger the copy action.\n\nBy passing the `copiedTimeout` option to `useClipboard()`, you can use `clipboard.copied` as a way to toggle the copied state in the UI.\n\n```jsx\nimport { useClipboard } from 'use-clipboard-copy';\n\nexport default function PublicUrl({ url }) {\n  const clipboard = useClipboard({\n    copiedTimeout: 600, // timeout duration in milliseconds\n  });\n  return (\n    <div>\n      <input ref={clipboard.target} value={url} readOnly />\n      <button onClick={clipboard.copy}>\n        {clipboard.copied ? 'Copied' : 'Copy Link'}\n      </button>\n    </div>\n  );\n}\n```\n\n### Handling Success and Errors\n\nCopy to clipboard in browsers can be tricky some times - there are various reasons that can contribute to preventing the copy action from working. Therefore, you should always handle such cases.\n\nBy passing an `onSuccess` and `onError` callbacks to the `useClipboard` options, you will be able to handle whether the `copy` action was performed successfully.\n\n```js\nfunction CopyText() {\n  const clipboard = useClipboard({\n    onSuccess() {\n      console.log('Text was copied successfully!')\n    },\n    onError() {\n      console.log('Failed to copy text!')\n    }\n  });\n  return (\n    <div>\n      <input ref={clipboard.target} />\n      <button onClick={clipboard.copy}>Copy</button>\n    </div>\n  );\n}\n```\n\nIn case the `copy` action fails, `useClipboard` will handle that gracefully by selecting the `target` input instead so that users can copy the text manually. This behavior can be disabled by passing `selectOnError: false` to the clipboard options.\n\n## Browser Support\n\n`use-clipboard-copy` is supported in all browsers that [supports the native clipboard APIs](https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/Interact_with_the_clipboard), including major browsers such as **Chrome, Firefox, Edge, Safari, IE11**.\n\nThis hook provides an `isSupported` method that you can use to check for browser support and update the UI accordingly:\n\n```jsx\nfunction ClipboardSupport() {\n  const clipboard = useClipboard();\n  return (\n    <div>\n      {clipboard.isSupported()\n        ? \"yay! copy-to-clipboard is supported\"\n        : \"meh. copy-to-clipboard is not supported\"}\n    </div>\n  );\n}\n```\n\n\n\n## API\n\n### `useClipboard(options?: UseClipboardOptions): ClipboardAPI`\n\n`use-clipboard-copy` exposes a named export `useClipboard` which is the hook function itself. It takes an optional options object, and returns an object to control the clipboard.\n\n```js\nimport { useClipboard } from 'use-clipboard-copy';\n\nfunction CopyText() {\n  const clipboard = useClipboard();\n  return (\n    // ...\n  );\n}\n```\n\n### `UseClipboardOptions`\n\n`useClipboard` takes an optional object with the following properties:\n\n- [`copiedTimeout?: number`](#copiedtimeout-number)\n- [`onSuccess?: () => void`](#onsuccess---void)\n- [`onError?: () => void`](#onerror---void)\n- [`selectOnCopy?: boolean`](#selectoncopy-boolean)\n- [`selectOnError?: boolean`](#selectonerror-boolean)\n\n#### `copiedTimeout?: number`\n\nThe duration in milliseconds used to toggled the [`copied`](#copied-boolean) state upon a successful copy action.\n\n#### `onSuccess?: () => void`\n\nA callback function that will be called upon a successful copy action.\n\n#### `onError?: () => void`\n\nA callback function that will be called when the copy action fails.\n\n#### `selectOnCopy?: boolean`\n\nDefaults to `false`.\n\nA boolean indicating whether the text of the [`target`](#target-reactrefobjectany) element (if set) will be selected upon a successful copy action.\n\n#### `selectOnError?: boolean`\n\nDefaults to `true`.\n\nA boolean indicating whether the text of the [`target`](#target-reactrefobjectany) element (if set) will be selected when the copy action fails.\n\n### `ClipboardAPI`\n\n`useClipboard` returns an object with the following properties:\n\n- [`copied: boolean`](#copied-boolean)\n- [`copy: (text?: string) => void`](#copy-text-string--void)\n- [`isSupported: () => boolean`](#issupported---boolean)\n- [`target: React.RefObject<any>`](#target-reactrefobjectany)\n\n#### `copy: (text?: string) => void`\n\nA method that will be used to preform the copy action. If it's used without passing a string, the `copy` action will use the text of the [`target`](#target-reactrefobjectany) element (if set).\n\n```jsx\n<input ref={clipboard.target} value=\"a text to copy\" />;\n<button onClick={clipboard.copy} />;\n```\n\nOptionally, `copy` takes a `string` to perform the copy action imperatively (programmatically). When this is used, the [`target`](#target-reactrefobjectany) element (if set) will be ignored.\n\n```jsx\n<button onClick={() => clipboard.copy('a text to copy')} />;\n```\n\n#### `target: React.RefObject<any>`\n\nA React Ref object used on input and textarea elements that holds the text to be copied.\n\n```jsx\n<input ref={clipboard.target} value=\"a text to copy\" />;\n```\n\n#### `isSupported: () => boolean`\n\nA function that returns a boolean indicating whether the browser supports the clipboard APIs. Useful to deterministically update the UI if the browser does not support the clipboard functionality for whatever reason.\n\n#### `copied: boolean`\n\nA boolean indicating whether the copy action was just performed. Must be used with the [`copiedTimeout`](#copiedtimeout-number) option. Useful to update the UI to display temporary success state.\n\n## Acknowledgements\n\nThis hook is powered by [clipboard-copy](https://github.com/feross/clipboard-copy), the lightweight copy to clipboard for the web.\n\n## License\n\nMIT\n","readmeFilename":"README.md","gitHead":"3ef1733ff0b3b2c26ff0621abaf1bb086636bd11","_id":"use-clipboard-copy@0.1.0-beta.3","_nodeVersion":"10.15.2","_npmVersion":"6.7.0","dist":{"integrity":"sha512-01TdzZYbkJS8VR56vZj8Wnp752tfcLJ8OgrFoC+xi3tXER5ERETcbfH59d1J/GTJe87czutNnOWm94qyAHZcbQ==","shasum":"9511f6040c9c4d1069da3c4fffdad445e49e89ac","tarball":"https://registry.npmjs.org/use-clipboard-copy/-/use-clipboard-copy-0.1.0-beta.3.tgz","fileCount":7,"unpackedSize":16562,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJcqSM9CRA9TVsSAnZWagAAdwIP/iZZass8gXExrtqDqc2k\nM26cHT0hQT0uZzJxhy1Qc8ijNY7so3oJM10Zqs96kxnLtEaAjC32igou6o9b\nUYfLQ8V495Af61lc4MmYYzQUZHWbesd68KuAHuh7nTPrhbBffYaapSq2Op+d\nmwqNADor0CQtv1IekY68QMs3fIiqWDauQ47hKkd2PPRkIn40FkOzCqxRb60I\nwNGkPJjgWhZfXwjCHVbts2YzByidtYmQp3xh2x8z8aIezcPpOlk2iY1iE1Sr\nL/TGJEndI9WzbE4K8o4OukN9NWn3oQCLLKv0mlzNckIV8vous0P4iYe7BqNK\nXC2tzn3boeurco5Dceqv0bMnNlnbIoIs90t6vyeFNLlKeUDbx9/CH7uagX3B\nfGZiTC5RGRi3hfiBaDQt/DNdjjcha4QMjgiw8L0ZJdVCxmxICJSECna3k9JH\nauEoPFSElHr9+ZZD5gVYBweXDDqhEBkouOxfYIujB3TRObFvm+wZaNw8EUAz\nmz2tzR8L6iz3RqK35uYX1BigYfg3eEii6tc9o6o42LN87SbmCmNS9pp0GEEg\npCOPmrGEP8S87WU4Ea2miQgrHshjpxakCQi3xu30DjHNHl9fGAT5eZhaLWNO\ne+pLiHoi0zlAGJSrzEpKV/NrNQSOHcq79RbDrDDghkjR9aLsLVIOukGEGkBv\noaXU\r\n=rHSc\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQCcTQ6sQbLL8doB8aQunjeeWClfRipdsG9DvOrACy9pSAIgDgiWIIMqkCunhegOTmmY7Cao1KRrpvv551T4eDePWM0="}]},"maintainers":[{"name":"wsmd","email":"dwaseem@icloud.com"}],"_npmUser":{"name":"wsmd","email":"dwaseem@icloud.com"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/use-clipboard-copy_0.1.0-beta.3_1554588476710_0.29956972937688886"},"_hasShrinkwrap":false},"0.1.0":{"name":"use-clipboard-copy","version":"0.1.0","description":"Lightweight copy to clipboard hook for React","main":"dist/index.js","types":"dist/index.d.ts","repository":{"type":"git","url":"git+https://github.com/wsmd/use-clipboard-copy.git"},"homepage":"https://github.com/wsmd/use-clipboard-copy","bugs":{"url":"https://github.com/wsmd/use-clipboard-copy/issues"},"author":{"name":"Waseem Dahman","email":"dwaseem@icloud.com"},"license":"MIT","scripts":{"typecheck":"tsc --noEmit","lint":"tslint --project .","test":"jest","test:coverage":"jest --coverage","test:all":"yarn typecheck && yarn lint && yarn test:coverage && yarn size","coveralls":"cat ./coverage/lcov.info | ./node_modules/coveralls/bin/coveralls.js","build":"tsc","prebuild":"rm -rf dist","prepack":"yarn test:all && yarn build","size":"yarn build --skipLibCheck && size-limit"},"keywords":["react","react-hooks","copy-to-clipboard","clipboard-js","copy","cut","hook"],"prettier":{"trailingComma":"all","singleQuote":true},"jest":{"watchPathIgnorePatterns":["dist"],"transform":{"^.+\\.tsx?$":"ts-jest"},"collectCoverageFrom":["src/**.ts"]},"size-limit":[{"path":"dist/*.js","limit":"800 B"}],"peerDependencies":{"react":"^16.8.0"},"dependencies":{"clipboard-copy":"^3.0.0"},"devDependencies":{"@types/jest":"^24.0.11","@types/react":"^16.8.10","coveralls":"^3.0.3","jest":"^24.7.0","react":"16.9.0-alpha.0","react-dom":"16.9.0-alpha.0","react-hooks-testing-library":"^0.4.0","react-testing-library":"^6.1.2","size-limit":"^1.0.1","ts-jest":"^24.0.2","tslint":"^5.15.0","typescript":"^3.4.1"},"gitHead":"45b20d336d3c412ea6827dbacf314bbd61c7bda6","_id":"use-clipboard-copy@0.1.0","_nodeVersion":"10.15.2","_npmVersion":"6.7.0","dist":{"integrity":"sha512-9SQD9n/tyhCa5RegFURfAz5nQYSb8NTKcaVoPbQfoTCUpXjbfnFMmLePqt6YEiaTkggsznz1+UAjy2FURUhNVw==","shasum":"06106c08305c2d26253d24cb42cc18bd97c3d8fe","tarball":"https://registry.npmjs.org/use-clipboard-copy/-/use-clipboard-copy-0.1.0.tgz","fileCount":7,"unpackedSize":16555,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJcqYOFCRA9TVsSAnZWagAAONEP/2h8DFSvnMoA/ouAoAR4\nDv3jOMTTHBy3oKs6S5V18BtbZFVzlL/AR/wOXYBHVrctUmuxaTe/EaqRDmwE\nv2JTMvSrdMMTapOzPZmYkde9HZeSyxVcIL7N7/pknITDqfqCkDASCEx9eEE5\nABN+IH0a4oSp7Z2NPh0XX054XVmo2r9wbAEL8ZHL+16YLr2KtOUyNLq0rv66\nyZFB/FoOzisZ78DdPYusu2bp1Ywzg45jCbXg3uWpdbYQmR/z6PAZQtBeEj/x\nU6R3whuhncDBMscqSFKRM80X/zA+X8eWhOJ4xw+y0/Y5QRQe8TB8febD9jnm\n2SIjd2fpBfiCE74Zn57IJGMM1DCP2HV5LuUgwrTg78P36J52QAf87PjbF8el\no+/PM2Jcmz2bwUisOd/VwWp6DsPPazh91qdKCphsbKTomLSYubWGlEbEiYIn\nHUsJKyBPv2CfAGfm9FPdBtBPCcY257T49EmlKqjHOEqNz564GjAfUBI4IfQW\n3EaXdHCoWP2XHzYcia1EPSbVVEHMv1hYJrt1Ejmzv3guaEh/DsFHN5CUgYtx\nWFPbO5C0/iyV0rWpRgVhLbrHzC0S4OkEsBIMbvdUHHDn7vKC7Ovqp77uNrDl\nYlp/nLAhW6CoHJR1CIA0remgGxKpWC6PdITgD02ddUpNrtmKBNn1iKZvdMjq\nmUZi\r\n=AJy4\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCYaAztENP6c/uwlmih6TshQBi8ecy+3ndXCvYJOrNHowIhALKD37j1U8jkXG9Euy5FjUs4DCAsstoLD7K9fn3OHyeF"}]},"maintainers":[{"name":"wsmd","email":"dwaseem@icloud.com"}],"_npmUser":{"name":"wsmd","email":"dwaseem@icloud.com"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/use-clipboard-copy_0.1.0_1554613125356_0.3059132327068077"},"_hasShrinkwrap":false},"0.1.1":{"name":"use-clipboard-copy","version":"0.1.1","description":"Lightweight copy to clipboard hook for React","main":"dist/index.js","types":"dist/index.d.ts","repository":{"type":"git","url":"git+https://github.com/wsmd/use-clipboard-copy.git"},"homepage":"https://github.com/wsmd/use-clipboard-copy","bugs":{"url":"https://github.com/wsmd/use-clipboard-copy/issues"},"author":{"name":"Waseem Dahman","email":"dwaseem@icloud.com"},"license":"MIT","scripts":{"typecheck":"tsc --noEmit","lint":"tslint --project .","test":"jest","test:coverage":"jest --coverage","test:all":"yarn typecheck && yarn lint && yarn test:coverage && yarn size","coveralls":"cat ./coverage/lcov.info | ./node_modules/coveralls/bin/coveralls.js","build":"tsc","prebuild":"rm -rf dist","prepack":"yarn test:all && yarn build","size":"yarn build --skipLibCheck && size-limit"},"keywords":["react","react-hooks","copy-to-clipboard","clipboard-js","copy","cut","hook"],"prettier":{"trailingComma":"all","singleQuote":true},"jest":{"watchPathIgnorePatterns":["dist"],"transform":{"^.+\\.tsx?$":"ts-jest"},"collectCoverageFrom":["src/**.ts"]},"size-limit":[{"path":"dist/*.js","limit":"800 B"}],"peerDependencies":{"react":"^16.8.0"},"dependencies":{"clipboard-copy":"^3.0.0"},"devDependencies":{"@types/jest":"^24.0.11","@types/react":"^16.8.10","coveralls":"^3.0.3","jest":"^24.7.0","react":"16.9.0-alpha.0","react-dom":"16.9.0-alpha.0","react-hooks-testing-library":"^0.4.0","react-testing-library":"^6.1.2","size-limit":"^1.0.1","ts-jest":"^24.0.2","tslint":"^5.15.0","typescript":"^3.4.1"},"gitHead":"27d3422c019de64942d1df6df9cbddb1f8b89ff5","_id":"use-clipboard-copy@0.1.1","_nodeVersion":"10.16.0","_npmVersion":"6.9.0","dist":{"integrity":"sha512-EC7QWIFyVkVc0gqqslRmM+RCdBAefDD9Ptu7vzV1wuArr3UrLfBf2apqXSaxpu7h/SIwL1UDPXHSmepU15WPqg==","shasum":"41ee5872288f95d35c69951e94ce9fe705a53368","tarball":"https://registry.npmjs.org/use-clipboard-copy/-/use-clipboard-copy-0.1.1.tgz","fileCount":7,"unpackedSize":16555,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJdL2McCRA9TVsSAnZWagAAIuoP/RvyI+8YhZFiCFE7TgVI\ndNSMnzhvsb7cNh2RWGOMsVyTIke8HuqMrjMTdOhYNnK74fZfCsKqBkaPWPpp\nSVJ09s3Ijnf1NU/67QUTzG2YJC3qcqvDLufruAZJ4n1C0UwiQPhF/FxSEjb/\nOD7OrVsliF2joPEaGUaRrdnswmNOYGc1bqKKqfY7/Hl4GpOKt5Q10ejfv6L7\n3mDhCKScPYxVQwf3RX5OI31WwO4OtvYmuVpSzzJGoyt5voJFt19AFLYNNkXE\nF+0+bm8JKcx+gwLI/3S1yOruxIPdACqGviFVjDOOpYDJiKuz/kDq3ltQl8ku\nJCjG9ePHWwL8Nm2qcY7lyN+7YgXlgGnwMvCxLMaHCfoxi+3ZIeMYp156qEKf\ne9Q/geNnQgtu+REDBEbzZqxwLgJNitUy6CQtgikateboAjcONVL07DuiRnHO\nrbZGQNUm5JM8of1O5Jkw+W8UsQ7guBrcWZotzrHb6PHhGwMZ+72/TsCxZCh6\nJTDRlrxXlW28I3fuiv1zDcnlCJmUEWBx54Zp9FmVTya2zfm8VijONqVe1TYp\nxLfH7t7b09lD3q76dMn9Ev3gszrAZUmdD2mLjvjICuuQiZOEE0B46Bc6wWzv\ndJRRpW8Pj6YqU+O68d1dbh+cS/jYSFUPXTNiVnEapMi2IZjxsJPKoCuWridk\nCyWX\r\n=eOqg\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQC0HabbL8SshncV7yQKt+jvyAf2YFV00CeggfjDWxaZRwIgfjnt0iQk2xjMQ7FBpIWB0Qp23MMlQkIWbOAtzaHCn9Y="}]},"maintainers":[{"name":"wsmd","email":"dwaseem@icloud.com"}],"_npmUser":{"name":"wsmd","email":"dwaseem@icloud.com"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/use-clipboard-copy_0.1.1_1563386651511_0.240282280902534"},"_hasShrinkwrap":false},"0.2.0-beta.0":{"name":"use-clipboard-copy","version":"0.2.0-beta.0","description":"Lightweight copy to clipboard hook for React","main":"dist/index.js","module":"dist/index.js","types":"dist/index.d.ts","sideEffects":false,"repository":{"type":"git","url":"git+https://github.com/wsmd/use-clipboard-copy.git"},"homepage":"https://github.com/wsmd/use-clipboard-copy","bugs":{"url":"https://github.com/wsmd/use-clipboard-copy/issues"},"author":{"name":"Waseem Dahman","email":"dwaseem@icloud.com"},"license":"MIT","scripts":{"typecheck":"tsc --noEmit","lint":"tslint --project .","test":"jest","test:coverage":"jest --coverage","test:all":"yarn typecheck && yarn lint && yarn test:coverage && yarn test:size","test:size":"yarn build --skipLibCheck && size-limit","coveralls":"cat ./coverage/lcov.info | ./node_modules/coveralls/bin/coveralls.js","prebuild":"rm -rf dist","build":"tsc","prepack":"yarn test:all && yarn build"},"keywords":["react","react-hooks","copy-to-clipboard","clipboard-js","copy","cut","hook"],"prettier":{"trailingComma":"all","singleQuote":true},"jest":{"watchPathIgnorePatterns":["dist"],"transform":{"^.+\\.tsx?$":"ts-jest"},"collectCoverageFrom":["src/**.ts"]},"size-limit":[{"path":"dist/index.js","limit":"650 B"}],"peerDependencies":{"react":"^16.8.0"},"dependencies":{"clipboard-copy":"^3.0.0"},"devDependencies":{"@types/jest":"^24.0.11","@types/react":"^16.8.10","coveralls":"^3.0.3","jest":"^24.7.0","react":"16.9.0-alpha.0","react-dom":"16.9.0-alpha.0","react-hooks-testing-library":"^0.4.0","react-testing-library":"^6.1.2","size-limit":"^1.0.1","ts-jest":"^24.0.2","tslint":"^5.15.0","typescript":"^3.4.1"},"gitHead":"5258d76e2fefe19748ef986f423f6c6e0d05d98f","readme":"<h1 align=\"center\">\n  <img src=\"https://user-images.githubusercontent.com/2100222/55596467-9c054980-5716-11e9-8723-b8c286fcd9e3.png\" width=\"128\">\n  <br>\n  use-clipboard-copy\n</h1>\n\n<p align=\"center\">\n  <a href=\"https://www.npmjs.com/package/use-clipboard-copy\">\n    <img src=\"https://img.shields.io/npm/v/use-clipboard-copy.svg\" alt=\"Current Release\" />\n  </a>\n  <a href=\"https://www.npmjs.com/package/use-clipboard-copy\">\n    <img src=\"https://badgen.net/npm/dt/use-clipboard-copy\" alt=\"Downloads\" />\n  </a>\n  <a href=\"https://travis-ci.org/wsmd/use-clipboard-copy\">\n    <img src=\"https://travis-ci.org/wsmd/use-clipboard-copy.svg?branch=master\" alt=\"CI Build\">\n  </a>\n  <a href='https://coveralls.io/github/wsmd/use-clipboard-copy?branch=master'>\n    <img src='https://coveralls.io/repos/github/wsmd/use-clipboard-copy/badge.svg?branch=master' alt='Coverage Status' />\n  </a>\n  <a href=\"https://github.com/wsmd/use-clipboard-copy/blob/master/LICENSE\">\n    <img src=\"https://img.shields.io/github/license/wsmd/use-clipboard-copy.svg\" alt=\"Licence\">\n  </a>\n</p>\n\n<details>\n<summary>ðŸ“– Table of Contents</summary>\n<p>\n\n- [Motivation](#motivation)\n- [Getting Started](#getting-started)\n- [Usage](#usage)\n  - [Copying Text of Another Target Element](#copying-text-of-another-target-element)\n  - [Copying Text Imperatively (Without a Target Element)](#copying-text-imperatively-without-a-target-element)\n  - [Displaying a Temporary Success State](#displaying-a-temporary-success-state)\n  - [Handling Success and Errors](#handling-success-and-errors)\n- [Browser Support](#browser-support)\n- [API](#api)\n  - [`useClipboard(options?: UseClipboardOptions): ClipboardAPI`](#useclipboardoptions-useclipboardoptions-clipboardapi)\n  - [`UseClipboardOptions`](#useclipboardoptions)\n    - [`copiedTimeout?: number`](#copiedtimeout-number)\n    - [`onSuccess?: () => void`](#onsuccess---void)\n    - [`onError?: () => void`](#onerror---void)\n    - [`selectOnCopy?: boolean`](#selectoncopy-boolean)\n    - [`selectOnError?: boolean`](#selectonerror-boolean)\n  - [`ClipboardAPI`](#clipboardapi)\n    - [`copy: (text?: string) => void`](#copy-text-string--void)\n    - [`target: React.RefObject<any>`](#target-reactrefobjectany)\n    - [`isSupported: () => boolean`](#issupported---boolean)\n    - [`copied: boolean`](#copied-boolean)\n- [Acknowledgements](#acknowledgements)\n- [License](#license)\n\n</p>\n</details>\n\n## Motivation\n\nThere are various copy-to-clipboard solutions for Javascript â€“ really good ones, but getting them to work with React can feel a little odd... they don't feel very _React-y_.\n\n`use-clipboard-copy` is a **lightweight** (under [650 bytes](https://github.com/ai/size-limit) minzipped) React hook that makes it possible to add a copy-to-clipboard functionality to your React components with very little code! A simple implementation looks like this:\n\n```js\nfunction CopyText() {\n  const clipboard = useClipboard();\n  return (\n    <div>\n      <input ref={clipboard.target} />\n      <button onClick={clipboard.copy}>Copy</button>\n    </div>\n  );\n}\n```\n\nP.S. You can do more than that with `use-clipboard-copy`. Keep reading!\n\n## Getting Started\n\nTo get started, add `use-clipboard-copy` to your project:\n\n```\nnpm install --save use-clipboard-copy\n```\n\nPlease note that `use-clipboard-copy` requires `react@^16.8.0` as a peer dependency.\n\n## Usage\n\n### Copying Text of Another Target Element\n\nA simple copy-to-clipboard interface consists of two parts:\n\n- The `target`, an element who holds the value to be copied, usually an input.\n- The `copy` action.\n\n```jsx\nimport { useClipboard } from 'use-clipboard-copy';\n\nexport default function PublicUrl({ url }) {\n  const clipboard = useClipboard();\n  return (\n    <div>\n      <input ref={clipboard.target} value={url} readOnly />\n      <button onClick={clipboard.copy}>Copy Link</button>\n    </div>\n  );\n}\n```\n\n### Copying Text Imperatively (Without a Target Element)\n\nIt is also possible to perform a copy action imperatively (programmatically). For example, a copy-to-clipboard interface may consist of a single copy button without any additional inputs or values displayed to the user. By passing a string to the `clipboard.copy` action, the specified string will be copied to the clipboard.\n\n```jsx\nimport { useClipboard } from 'use-clipboard-copy';\n\nexport default function PublicUrl({ id }) {\n  const clipboard = useClipboard();\n\n  const handleClick = React.useCallback(\n    () => {\n      const url = Utils.formatUrl({ query: { id } });\n      clipboard.copy(url); // programmatically copying a value\n    },\n    [clipboard.copy, id]\n  );\n\n  return (\n    <button onClick={handleClick}>Copy Link</button>\n  );\n}\n```\n\n### Displaying a Temporary Success State\n\nSometimes it can be helpful to notify the user that the text was successfully copied to the clipboard, usually by displaying a temporary \"Copied\" state after they trigger the copy action.\n\nBy passing the `copiedTimeout` option to `useClipboard()`, you can use `clipboard.copied` as a way to toggle the copied state in the UI.\n\n```jsx\nimport { useClipboard } from 'use-clipboard-copy';\n\nexport default function PublicUrl({ url }) {\n  const clipboard = useClipboard({\n    copiedTimeout: 600, // timeout duration in milliseconds\n  });\n  return (\n    <div>\n      <input ref={clipboard.target} value={url} readOnly />\n      <button onClick={clipboard.copy}>\n        {clipboard.copied ? 'Copied' : 'Copy Link'}\n      </button>\n    </div>\n  );\n}\n```\n\n### Handling Success and Errors\n\nCopy to clipboard in browsers can be tricky some times - there are various reasons that can contribute to preventing the copy action from working. Therefore, you should always handle such cases.\n\nBy passing an `onSuccess` and `onError` callbacks to the `useClipboard` options, you will be able to handle whether the `copy` action was performed successfully.\n\n```js\nfunction CopyText() {\n  const clipboard = useClipboard({\n    onSuccess() {\n      console.log('Text was copied successfully!')\n    },\n    onError() {\n      console.log('Failed to copy text!')\n    }\n  });\n  return (\n    <div>\n      <input ref={clipboard.target} />\n      <button onClick={clipboard.copy}>Copy</button>\n    </div>\n  );\n}\n```\n\nIn case the `copy` action fails, `useClipboard` will handle that gracefully by selecting the `target` input instead so that users can copy the text manually. This behavior can be disabled by passing `selectOnError: false` to the clipboard options.\n\n## Browser Support\n\n`use-clipboard-copy` is supported in all browsers that [supports the native clipboard APIs](https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/Interact_with_the_clipboard), including major browsers such as **Chrome, Firefox, Edge, Safari, IE11**.\n\nThis hook provides an `isSupported` method that you can use to check for browser support and update the UI accordingly:\n\n```jsx\nfunction ClipboardSupport() {\n  const clipboard = useClipboard();\n  return (\n    <div>\n      {clipboard.isSupported()\n        ? \"yay! copy-to-clipboard is supported\"\n        : \"meh. copy-to-clipboard is not supported\"}\n    </div>\n  );\n}\n```\n\n\n\n## API\n\n### `useClipboard(options?: UseClipboardOptions): ClipboardAPI`\n\n`use-clipboard-copy` exposes a named export `useClipboard` which is the hook function itself. It takes an optional options object, and returns an object to control the clipboard.\n\n```js\nimport { useClipboard } from 'use-clipboard-copy';\n\nfunction CopyText() {\n  const clipboard = useClipboard();\n  return (\n    // ...\n  );\n}\n```\n\n### `UseClipboardOptions`\n\n`useClipboard` takes an optional object with the following properties:\n\n- [`copiedTimeout?: number`](#copiedtimeout-number)\n- [`onSuccess?: () => void`](#onsuccess---void)\n- [`onError?: () => void`](#onerror---void)\n- [`selectOnCopy?: boolean`](#selectoncopy-boolean)\n- [`selectOnError?: boolean`](#selectonerror-boolean)\n\n#### `copiedTimeout?: number`\n\nThe duration in milliseconds used to toggled the [`copied`](#copied-boolean) state upon a successful copy action.\n\n#### `onSuccess?: () => void`\n\nA callback function that will be called upon a successful copy action.\n\n#### `onError?: () => void`\n\nA callback function that will be called when the copy action fails.\n\n#### `selectOnCopy?: boolean`\n\nDefaults to `false`.\n\nA boolean indicating whether the text of the [`target`](#target-reactrefobjectany) element (if set) will be selected upon a successful copy action.\n\n#### `selectOnError?: boolean`\n\nDefaults to `true`.\n\nA boolean indicating whether the text of the [`target`](#target-reactrefobjectany) element (if set) will be selected when the copy action fails.\n\n### `ClipboardAPI`\n\n`useClipboard` returns an object with the following properties:\n\n- [`copied: boolean`](#copied-boolean)\n- [`copy: (text?: string) => void`](#copy-text-string--void)\n- [`isSupported: () => boolean`](#issupported---boolean)\n- [`target: React.RefObject<any>`](#target-reactrefobjectany)\n\n#### `copy: (text?: string) => void`\n\nA method that will be used to preform the copy action. If it's used without passing a string, the `copy` action will use the text of the [`target`](#target-reactrefobjectany) element (if set).\n\n```jsx\n<input ref={clipboard.target} value=\"a text to copy\" />;\n<button onClick={clipboard.copy} />;\n```\n\nOptionally, `copy` takes a `string` to perform the copy action imperatively (programmatically). When this is used, the [`target`](#target-reactrefobjectany) element (if set) will be ignored.\n\n```jsx\n<button onClick={() => clipboard.copy('a text to copy')} />;\n```\n\n#### `target: React.RefObject<any>`\n\nA React Ref object used on input and textarea elements that holds the text to be copied.\n\n```jsx\n<input ref={clipboard.target} value=\"a text to copy\" />;\n```\n\n#### `isSupported: () => boolean`\n\nA function that returns a boolean indicating whether the browser supports the clipboard APIs. Useful to deterministically update the UI if the browser does not support the clipboard functionality for whatever reason.\n\n#### `copied: boolean`\n\nA boolean indicating whether the copy action was just performed. Must be used with the [`copiedTimeout`](#copiedtimeout-number) option. Useful to update the UI to display temporary success state.\n\n## Acknowledgements\n\nThis hook is powered by [clipboard-copy](https://github.com/feross/clipboard-copy), the lightweight copy to clipboard for the web.\n\n## License\n\nMIT\n","readmeFilename":"README.md","_id":"use-clipboard-copy@0.2.0-beta.0","_nodeVersion":"13.2.0","_npmVersion":"6.13.1","dist":{"integrity":"sha512-fTrD7ioP9eQThbgqrYc1df4X+Z8Mh3VN68rI0Vut3ph38S9ljqgczU85rGsiOE2nVE9bFLmMPrm09bvNvY6DoQ==","shasum":"eec2efdc1d61613d5ab98483c495eeb62f0553ec","tarball":"https://registry.npmjs.org/use-clipboard-copy/-/use-clipboard-copy-0.2.0-beta.0.tgz","fileCount":7,"unpackedSize":16341,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJeBUj9CRA9TVsSAnZWagAAw2cQAI3P9pLqc1eeEM6ylvK2\nUn3+AWQKZfJQziCHRxf5atrLCYohehktkNMRvRttnMGf7MQGZrwt+0QTvD6o\ngu1jq6e8qXdVJ8ZMosZkIf+C6Db40gxSYusBNEdJXmDxaViAQkbRQo9koB5W\nDLx6eKuXlmfgr4iKlg8B5BmGb2jYNwKRkkq0Fu0Ig2DG/XFpWriLIQHqz6b8\n0RkqFBgD1dWtwNjidhNxh/aGN8FmZ3BH42ecuVVo/7e+nIFcvHmUV1HfAy/q\nOTu6yv+UPsgSZFrd1eTFoky7ATSamIVDrI4HUgqTVdJdVCoxGGANL/2DjRBy\nCi3riGBnnQdKizJSpwaT1HRJqiaM140NFe2UpbnX0lnIw6FtScK9Uzbyoplw\ndfgW6u2afZtlbzdD/PdO0iN42EwsbLXgHA2Ag74878eKDusjma6JT6ME+gUw\nRutvbs69PWMJWXsXosud1m55gqHCRjyH0iy/DvEP3P7A0GOQXnA47x+q7Np8\nxoIAjL7xfHFkDYVEidlq/Pv3Wpoas/2SKoJgW/yEjCiBuDJS9HgyxYFmdQ3u\niRwZ/AC9nPhCwNV1tNUYaSBwRdZmTd97VFVN4rw5ES22L3Fz+7PEognYFh2S\nbqC6effeYlMr7qNbigJed8O0H2lcWgEJcIbuSCWe9FBD5kCLzBUNyctSzeZz\n5xZl\r\n=xt60\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQDWrvr3C7syeWOETfxKQxvdExbWm4TeOFfwwgv+K/FbuwIgR+wIlWGktRJSTGzSK4KlRTufom6UTVCgSwbBpl5+854="}]},"maintainers":[{"name":"wsmd","email":"dwaseem@icloud.com"}],"_npmUser":{"name":"wsmd","email":"dwaseem@icloud.com"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/use-clipboard-copy_0.2.0-beta.0_1577404669277_0.2888394635788787"},"_hasShrinkwrap":false},"0.2.0-beta.1":{"name":"use-clipboard-copy","version":"0.2.0-beta.1","description":"Lightweight copy to clipboard hook for React","main":"dist/index.js","module":"dist/index.js","types":"dist/index.d.ts","sideEffects":false,"repository":{"type":"git","url":"git+https://github.com/wsmd/use-clipboard-copy.git"},"homepage":"https://github.com/wsmd/use-clipboard-copy","bugs":{"url":"https://github.com/wsmd/use-clipboard-copy/issues"},"author":{"name":"Waseem Dahman","email":"dwaseem@icloud.com"},"license":"MIT","scripts":{"typecheck":"tsc --noEmit","lint":"tslint --project .","test":"jest","test:coverage":"jest --coverage","test:all":"yarn typecheck && yarn lint && yarn test:coverage && yarn test:size","test:size":"yarn build --skipLibCheck && size-limit","coveralls":"cat ./coverage/lcov.info | ./node_modules/coveralls/bin/coveralls.js","prebuild":"rm -rf dist","build":"tsc","prepack":"yarn test:all && yarn build"},"keywords":["react","react-hooks","copy-to-clipboard","clipboard-js","copy","cut","hook"],"prettier":{"trailingComma":"all","singleQuote":true},"jest":{"watchPathIgnorePatterns":["dist"],"transform":{"^.+\\.tsx?$":"ts-jest"},"collectCoverageFrom":["src/**.ts"]},"size-limit":[{"path":"dist/index.js","limit":"650 B"}],"peerDependencies":{"react":"^16.8.0"},"dependencies":{"clipboard-copy":"3.0.0"},"devDependencies":{"@types/jest":"^24.0.11","@types/react":"^16.8.10","coveralls":"^3.0.3","jest":"^24.7.0","react":"16.9.0-alpha.0","react-dom":"16.9.0-alpha.0","react-hooks-testing-library":"^0.4.0","react-testing-library":"^6.1.2","size-limit":"^1.0.1","ts-jest":"^24.0.2","tslint":"^5.15.0","typescript":"^3.4.1"},"gitHead":"c175e7b91d7d002f067d46cc1bec13043a27194d","readme":"<h1 align=\"center\">\n  <img src=\"https://user-images.githubusercontent.com/2100222/55596467-9c054980-5716-11e9-8723-b8c286fcd9e3.png\" width=\"128\">\n  <br>\n  use-clipboard-copy\n</h1>\n\n<p align=\"center\">\n  <a href=\"https://www.npmjs.com/package/use-clipboard-copy\">\n    <img src=\"https://img.shields.io/npm/v/use-clipboard-copy.svg\" alt=\"Current Release\" />\n  </a>\n  <a href=\"https://www.npmjs.com/package/use-clipboard-copy\">\n    <img src=\"https://badgen.net/npm/dt/use-clipboard-copy\" alt=\"Downloads\" />\n  </a>\n  <a href=\"https://travis-ci.org/wsmd/use-clipboard-copy\">\n    <img src=\"https://travis-ci.org/wsmd/use-clipboard-copy.svg?branch=master\" alt=\"CI Build\">\n  </a>\n  <a href='https://coveralls.io/github/wsmd/use-clipboard-copy?branch=master'>\n    <img src='https://coveralls.io/repos/github/wsmd/use-clipboard-copy/badge.svg?branch=master' alt='Coverage Status' />\n  </a>\n  <a href=\"https://github.com/wsmd/use-clipboard-copy/blob/master/LICENSE\">\n    <img src=\"https://img.shields.io/github/license/wsmd/use-clipboard-copy.svg\" alt=\"Licence\">\n  </a>\n</p>\n\n<details>\n<summary>ðŸ“– Table of Contents</summary>\n<p>\n\n- [Motivation](#motivation)\n- [Getting Started](#getting-started)\n- [Usage](#usage)\n  - [Copying Text of Another Target Element](#copying-text-of-another-target-element)\n  - [Copying Text Imperatively (Without a Target Element)](#copying-text-imperatively-without-a-target-element)\n  - [Displaying a Temporary Success State](#displaying-a-temporary-success-state)\n  - [Handling Success and Errors](#handling-success-and-errors)\n- [Browser Support](#browser-support)\n- [API](#api)\n  - [`useClipboard(options?: UseClipboardOptions): ClipboardAPI`](#useclipboardoptions-useclipboardoptions-clipboardapi)\n  - [`UseClipboardOptions`](#useclipboardoptions)\n    - [`copiedTimeout?: number`](#copiedtimeout-number)\n    - [`onSuccess?: () => void`](#onsuccess---void)\n    - [`onError?: () => void`](#onerror---void)\n    - [`selectOnCopy?: boolean`](#selectoncopy-boolean)\n    - [`selectOnError?: boolean`](#selectonerror-boolean)\n  - [`ClipboardAPI`](#clipboardapi)\n    - [`copy: (text?: string) => void`](#copy-text-string--void)\n    - [`target: React.RefObject<any>`](#target-reactrefobjectany)\n    - [`isSupported: () => boolean`](#issupported---boolean)\n    - [`copied: boolean`](#copied-boolean)\n- [Acknowledgements](#acknowledgements)\n- [License](#license)\n\n</p>\n</details>\n\n## Motivation\n\nThere are various copy-to-clipboard solutions for Javascript â€“ really good ones, but getting them to work with React can feel a little odd... they don't feel very _React-y_.\n\n`use-clipboard-copy` is a **lightweight** (under [650 bytes](https://github.com/ai/size-limit) minzipped) React hook that makes it possible to add a copy-to-clipboard functionality to your React components with very little code! A simple implementation looks like this:\n\n```js\nfunction CopyText() {\n  const clipboard = useClipboard();\n  return (\n    <div>\n      <input ref={clipboard.target} />\n      <button onClick={clipboard.copy}>Copy</button>\n    </div>\n  );\n}\n```\n\nP.S. You can do more than that with `use-clipboard-copy`. Keep reading!\n\n## Getting Started\n\nTo get started, add `use-clipboard-copy` to your project:\n\n```\nnpm install --save use-clipboard-copy\n```\n\nPlease note that `use-clipboard-copy` requires `react@^16.8.0` as a peer dependency.\n\n## Usage\n\n### Copying Text of Another Target Element\n\nA simple copy-to-clipboard interface consists of two parts:\n\n- The `target`, an element who holds the value to be copied, usually an input.\n- The `copy` action.\n\n```jsx\nimport { useClipboard } from 'use-clipboard-copy';\n\nexport default function PublicUrl({ url }) {\n  const clipboard = useClipboard();\n  return (\n    <div>\n      <input ref={clipboard.target} value={url} readOnly />\n      <button onClick={clipboard.copy}>Copy Link</button>\n    </div>\n  );\n}\n```\n\n### Copying Text Imperatively (Without a Target Element)\n\nIt is also possible to perform a copy action imperatively (programmatically). For example, a copy-to-clipboard interface may consist of a single copy button without any additional inputs or values displayed to the user. By passing a string to the `clipboard.copy` action, the specified string will be copied to the clipboard.\n\n```jsx\nimport { useClipboard } from 'use-clipboard-copy';\n\nexport default function PublicUrl({ id }) {\n  const clipboard = useClipboard();\n\n  const handleClick = React.useCallback(\n    () => {\n      const url = Utils.formatUrl({ query: { id } });\n      clipboard.copy(url); // programmatically copying a value\n    },\n    [clipboard.copy, id]\n  );\n\n  return (\n    <button onClick={handleClick}>Copy Link</button>\n  );\n}\n```\n\n### Displaying a Temporary Success State\n\nSometimes it can be helpful to notify the user that the text was successfully copied to the clipboard, usually by displaying a temporary \"Copied\" state after they trigger the copy action.\n\nBy passing the `copiedTimeout` option to `useClipboard()`, you can use `clipboard.copied` as a way to toggle the copied state in the UI.\n\n```jsx\nimport { useClipboard } from 'use-clipboard-copy';\n\nexport default function PublicUrl({ url }) {\n  const clipboard = useClipboard({\n    copiedTimeout: 600, // timeout duration in milliseconds\n  });\n  return (\n    <div>\n      <input ref={clipboard.target} value={url} readOnly />\n      <button onClick={clipboard.copy}>\n        {clipboard.copied ? 'Copied' : 'Copy Link'}\n      </button>\n    </div>\n  );\n}\n```\n\n### Handling Success and Errors\n\nCopy to clipboard in browsers can be tricky some times - there are various reasons that can contribute to preventing the copy action from working. Therefore, you should always handle such cases.\n\nBy passing an `onSuccess` and `onError` callbacks to the `useClipboard` options, you will be able to handle whether the `copy` action was performed successfully.\n\n```js\nfunction CopyText() {\n  const clipboard = useClipboard({\n    onSuccess() {\n      console.log('Text was copied successfully!')\n    },\n    onError() {\n      console.log('Failed to copy text!')\n    }\n  });\n  return (\n    <div>\n      <input ref={clipboard.target} />\n      <button onClick={clipboard.copy}>Copy</button>\n    </div>\n  );\n}\n```\n\nIn case the `copy` action fails, `useClipboard` will handle that gracefully by selecting the `target` input instead so that users can copy the text manually. This behavior can be disabled by passing `selectOnError: false` to the clipboard options.\n\n## Browser Support\n\n`use-clipboard-copy` is supported in all browsers that [supports the native clipboard APIs](https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/Interact_with_the_clipboard), including major browsers such as **Chrome, Firefox, Edge, Safari, IE11**.\n\nThis hook provides an `isSupported` method that you can use to check for browser support and update the UI accordingly:\n\n```jsx\nfunction ClipboardSupport() {\n  const clipboard = useClipboard();\n  return (\n    <div>\n      {clipboard.isSupported()\n        ? \"yay! copy-to-clipboard is supported\"\n        : \"meh. copy-to-clipboard is not supported\"}\n    </div>\n  );\n}\n```\n\n\n\n## API\n\n### `useClipboard(options?: UseClipboardOptions): ClipboardAPI`\n\n`use-clipboard-copy` exposes a named export `useClipboard` which is the hook function itself. It takes an optional options object, and returns an object to control the clipboard.\n\n```js\nimport { useClipboard } from 'use-clipboard-copy';\n\nfunction CopyText() {\n  const clipboard = useClipboard();\n  return (\n    // ...\n  );\n}\n```\n\n### `UseClipboardOptions`\n\n`useClipboard` takes an optional object with the following properties:\n\n- [`copiedTimeout?: number`](#copiedtimeout-number)\n- [`onSuccess?: () => void`](#onsuccess---void)\n- [`onError?: () => void`](#onerror---void)\n- [`selectOnCopy?: boolean`](#selectoncopy-boolean)\n- [`selectOnError?: boolean`](#selectonerror-boolean)\n\n#### `copiedTimeout?: number`\n\nThe duration in milliseconds used to toggled the [`copied`](#copied-boolean) state upon a successful copy action.\n\n#### `onSuccess?: () => void`\n\nA callback function that will be called upon a successful copy action.\n\n#### `onError?: () => void`\n\nA callback function that will be called when the copy action fails.\n\n#### `selectOnCopy?: boolean`\n\nDefaults to `false`.\n\nA boolean indicating whether the text of the [`target`](#target-reactrefobjectany) element (if set) will be selected upon a successful copy action.\n\n#### `selectOnError?: boolean`\n\nDefaults to `true`.\n\nA boolean indicating whether the text of the [`target`](#target-reactrefobjectany) element (if set) will be selected when the copy action fails.\n\n### `ClipboardAPI`\n\n`useClipboard` returns an object with the following properties:\n\n- [`copied: boolean`](#copied-boolean)\n- [`copy: (text?: string) => void`](#copy-text-string--void)\n- [`isSupported: () => boolean`](#issupported---boolean)\n- [`target: React.RefObject<any>`](#target-reactrefobjectany)\n\n#### `copy: (text?: string) => void`\n\nA method that will be used to preform the copy action. If it's used without passing a string, the `copy` action will use the text of the [`target`](#target-reactrefobjectany) element (if set).\n\n```jsx\n<input ref={clipboard.target} value=\"a text to copy\" />;\n<button onClick={clipboard.copy} />;\n```\n\nOptionally, `copy` takes a `string` to perform the copy action imperatively (programmatically). When this is used, the [`target`](#target-reactrefobjectany) element (if set) will be ignored.\n\n```jsx\n<button onClick={() => clipboard.copy('a text to copy')} />;\n```\n\n#### `target: React.RefObject<any>`\n\nA React Ref object used on input and textarea elements that holds the text to be copied.\n\n```jsx\n<input ref={clipboard.target} value=\"a text to copy\" />;\n```\n\n#### `isSupported: () => boolean`\n\nA function that returns a boolean indicating whether the browser supports the clipboard APIs. Useful to deterministically update the UI if the browser does not support the clipboard functionality for whatever reason.\n\n#### `copied: boolean`\n\nA boolean indicating whether the copy action was just performed. Must be used with the [`copiedTimeout`](#copiedtimeout-number) option. Useful to update the UI to display temporary success state.\n\n## Acknowledgements\n\nThis hook is powered by [clipboard-copy](https://github.com/feross/clipboard-copy), the lightweight copy to clipboard for the web.\n\n## License\n\nMIT\n","readmeFilename":"README.md","_id":"use-clipboard-copy@0.2.0-beta.1","_nodeVersion":"13.2.0","_npmVersion":"6.13.1","dist":{"integrity":"sha512-q7eqqmWkcqN0q4W23f5M+DgX2nZciyXLx7zrD3Xz/4K+kCVEBLR6efVPPMEPdHf53R9h/I6q5EWIQUflALjn2g==","shasum":"79ebf4f4c3531f0a384c86c0ebaf9402f68b3de0","tarball":"https://registry.npmjs.org/use-clipboard-copy/-/use-clipboard-copy-0.2.0-beta.1.tgz","fileCount":7,"unpackedSize":16340,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJeBU4uCRA9TVsSAnZWagAAfYsP/3vgZNnjnUHkUiPArQMq\nLAz+AqVTT3X3hGn6B+PnXV4uBYLiPCVPQX86873dZcmkkgqOdqZl3cG6bmku\nhG6BCPUSGZJftvjhQNp+P7l1ABhVJB/p4BqTXYqjqHjcYat+VnW0YtYk9IDW\nnwIhiqqLmBn4F95aUEKEzFG1nGSrv6bPqWW+4JOIbdubM9EiPEk6blsenEL7\nqJahmKjo0bG9qYn52e8iuVC3LOqXACWOi1Aq56Qv/muGBH03+2oMFUNO47YI\nrtMfuOc7Ie5AjMgp3yqq+VG7Cquvcf7gnUUjoKq1SRMXg/ffKcU1ZC2WqE6+\n9l0sjsERVc5bI8Ujis4VnhvApRuYIJnUFal70gULo2S+zfGvJKUMbwP0p0XD\nO8Yej6ILCDlH8Dx/Icq37TATfF+mKNGUKkEPmF65BgUkOV7sslRfPejQquzW\ntVNma/fUAM0o9NWicU22/Hbj5w0wWKO9E4s2mf2MwtEclDBIfVhNKkmn9UB5\npWbnEnR6BQKq9y60o/xhe4myDAgjXF+GAaTTYsw+lgdqbGcGDlI8tHhj9ink\nlQbkVRBqdG5Ly2UJ8gH00wFc2odV7otLNkQEP280ySv+OE5pV3/xx2KSk/7K\nM97Sx+xsL0i8HRF8c8Lm30k8pvrGhAS1wJOO4+pNDqTpm1mlmdaKuJ24tIm0\niLIK\r\n=M72c\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQDbyXo80oyEDI7hWC2sApzLznD7le6Nw9XYhs5gwfmI+gIgTSAf5MkGTyaCeOlAo1+12ktSeM0hnW8OmOE2DuOTn/0="}]},"maintainers":[{"name":"wsmd","email":"dwaseem@icloud.com"}],"_npmUser":{"name":"wsmd","email":"dwaseem@icloud.com"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/use-clipboard-copy_0.2.0-beta.1_1577405998196_0.4779974156177038"},"_hasShrinkwrap":false},"0.1.2-beta.0":{"name":"use-clipboard-copy","version":"0.1.2-beta.0","description":"Lightweight copy to clipboard hook for React","main":"dist/index.js","types":"dist/index.d.ts","repository":{"type":"git","url":"git+https://github.com/wsmd/use-clipboard-copy.git"},"homepage":"https://github.com/wsmd/use-clipboard-copy","bugs":{"url":"https://github.com/wsmd/use-clipboard-copy/issues"},"author":{"name":"Waseem Dahman","email":"dwaseem@icloud.com"},"license":"MIT","scripts":{"typecheck":"tsc --noEmit","lint":"tslint --project .","test":"jest","test:coverage":"jest --coverage","test:all":"yarn typecheck && yarn lint && yarn test:coverage && yarn size","coveralls":"cat ./coverage/lcov.info | ./node_modules/coveralls/bin/coveralls.js","build":"tsc","prebuild":"rm -rf dist","prepack":"yarn test:all && yarn build","size":"yarn build --skipLibCheck && size-limit"},"keywords":["react","react-hooks","copy-to-clipboard","clipboard-js","copy","cut","hook"],"prettier":{"trailingComma":"all","singleQuote":true},"jest":{"watchPathIgnorePatterns":["dist"],"transform":{"^.+\\.tsx?$":"ts-jest"},"collectCoverageFrom":["src/**.ts"]},"size-limit":[{"path":"dist/*.js","limit":"800 B"}],"peerDependencies":{"react":"^16.8.0"},"dependencies":{"clipboard-copy":"^3.0.0"},"devDependencies":{"@types/jest":"^24.0.11","@types/react":"^16.8.10","coveralls":"^3.0.3","jest":"^24.7.0","react":"16.9.0-alpha.0","react-dom":"16.9.0-alpha.0","react-hooks-testing-library":"^0.4.0","react-testing-library":"^6.1.2","size-limit":"^1.0.1","ts-jest":"^24.0.2","tslint":"^5.15.0","typescript":"^3.4.1"},"gitHead":"dde754f60740df42ea6936aa3c98c0ff8382aea9","readme":"<h1 align=\"center\">\n  <img src=\"https://user-images.githubusercontent.com/2100222/55596467-9c054980-5716-11e9-8723-b8c286fcd9e3.png\" width=\"128\">\n  <br>\n  use-clipboard-copy\n</h1>\n\n<p align=\"center\">\n  <a href=\"https://www.npmjs.com/package/use-clipboard-copy\">\n    <img src=\"https://img.shields.io/npm/v/use-clipboard-copy.svg\" alt=\"Current Release\" />\n  </a>\n  <a href=\"https://travis-ci.org/wsmd/use-clipboard-copy\">\n    <img src=\"https://travis-ci.org/wsmd/use-clipboard-copy.svg?branch=master\" alt=\"CI Build\">\n  </a>\n  <a href='https://coveralls.io/github/wsmd/use-clipboard-copy?branch=master'>\n    <img src='https://coveralls.io/repos/github/wsmd/use-clipboard-copy/badge.svg?branch=master' alt='Coverage Status' />\n  </a>\n  <a href=\"https://github.com/wsmd/use-clipboard-copy/blob/master/LICENSE\">\n    <img src=\"https://img.shields.io/github/license/wsmd/use-clipboard-copy.svg\" alt=\"Licence\">\n  </a>\n</p>\n\n<details>\n<summary>ðŸ“– Table of Contents</summary>\n<p>\n\n- [Motivation](#motivation)\n- [Getting Started](#getting-started)\n- [Usage](#usage)\n  - [Copying Text of Another Target Element](#copying-text-of-another-target-element)\n  - [Copying Text Imperatively (Without a Target Element)](#copying-text-imperatively-without-a-target-element)\n  - [Displaying a Temporary Success State](#displaying-a-temporary-success-state)\n  - [Handling Success and Errors](#handling-success-and-errors)\n- [Browser Support](#browser-support)\n- [API](#api)\n  - [`useClipboard(options?: UseClipboardOptions): ClipboardAPI`](#useclipboardoptions-useclipboardoptions-clipboardapi)\n  - [`UseClipboardOptions`](#useclipboardoptions)\n    - [`copiedTimeout?: number`](#copiedtimeout-number)\n    - [`onSuccess?: () => void`](#onsuccess---void)\n    - [`onError?: () => void`](#onerror---void)\n    - [`selectOnCopy?: boolean`](#selectoncopy-boolean)\n    - [`selectOnError?: boolean`](#selectonerror-boolean)\n  - [`ClipboardAPI`](#clipboardapi)\n    - [`copy: (text?: string) => void`](#copy-text-string--void)\n    - [`target: React.RefObject<any>`](#target-reactrefobjectany)\n    - [`isSupported: () => boolean`](#issupported---boolean)\n    - [`copied: boolean`](#copied-boolean)\n- [Acknowledgements](#acknowledgements)\n- [License](#license)\n\n</p>\n</details>\n\n## Motivation\n\nThere are various copy-to-clipboard solutions for Javascript â€“ really good ones, but getting them to work with React can feel a little odd... they don't feel very _React-y_.\n\n`use-clipboard-copy` is a **lightweight** (< 1KB) React hook that makes it possible to add a copy-to-clipboard functionality to your React application with very little code! A simple implementation looks like this:\n\n```js\nfunction CopyText() {\n  const clipboard = useClipboard();\n  return (\n    <div>\n      <input ref={clipboard.target} />\n      <button onClick={clipboard.copy}>Copy</button>\n    </div>\n  );\n}\n```\n\nP.S. You can do more than that with `use-clipboard-copy`. Keep reading!\n\n## Getting Started\n\nTo get started, add `use-clipboard-copy` to your project:\n\n```\nnpm install --save use-clipboard-copy\n```\n\nPlease note that `use-clipboard-copy` requires `react@^16.8.0` as a peer dependency.\n\n## Usage\n\n### Copying Text of Another Target Element\n\nA simple copy-to-clipboard interface consists of two parts:\n\n- The `target`, an element who holds the value to be copied, usually an input.\n- The `copy` action.\n\n```jsx\nimport { useClipboard } from 'use-clipboard-copy';\n\nexport default function PublicUrl({ url }) {\n  const clipboard = useClipboard();\n  return (\n    <div>\n      <input ref={clipboard.target} value={url} readOnly />\n      <button onClick={clipboard.copy}>Copy Link</button>\n    </div>\n  );\n}\n```\n\n### Copying Text Imperatively (Without a Target Element)\n\nIt is also possible to perform a copy action imperatively (programmatically). For example, a copy-to-clipboard interface may consist of a single copy button without any additional inputs or values displayed to the user. By passing a string to the `clipboard.copy` action, the specified string will be copied to the clipboard.\n\n```jsx\nimport { useClipboard } from 'use-clipboard-copy';\n\nexport default function PublicUrl({ id }) {\n  const clipboard = useClipboard();\n\n  const handleClick = React.useCallback(\n    () => {\n      const url = Utils.formatUrl({ query: { id } });\n      clipboard.copy(url); // programmatically copying a value\n    },\n    [clipboard.copy, id]\n  );\n\n  return (\n    <button onClick={handleClick}>Copy Link</button>\n  );\n}\n```\n\n### Displaying a Temporary Success State\n\nSometimes it can be helpful to notify the user that the text was successfully copied to the clipboard, usually by displaying a temporary \"Copied\" state after they trigger the copy action.\n\nBy passing the `copiedTimeout` option to `useClipboard()`, you can use `clipboard.copied` as a way to toggle the copied state in the UI.\n\n```jsx\nimport { useClipboard } from 'use-clipboard-copy';\n\nexport default function PublicUrl({ url }) {\n  const clipboard = useClipboard({\n    copiedTimeout: 600, // timeout duration in milliseconds\n  });\n  return (\n    <div>\n      <input ref={clipboard.target} value={url} readOnly />\n      <button onClick={clipboard.copy}>\n        {clipboard.copied ? 'Copied' : 'Copy Link'}\n      </button>\n    </div>\n  );\n}\n```\n\n### Handling Success and Errors\n\nCopy to clipboard in browsers can be tricky some times - there are various reasons that can contribute to preventing the copy action from working. Therefore, you should always handle such cases.\n\nBy passing an `onSuccess` and `onError` callbacks to the `useClipboard` options, you will be able to handle whether the `copy` action was performed successfully.\n\n```js\nfunction CopyText() {\n  const clipboard = useClipboard({\n    onSuccess() {\n      console.log('Text was copied successfully!')\n    },\n    onError() {\n      console.log('Failed to copy text!')\n    }\n  });\n  return (\n    <div>\n      <input ref={clipboard.target} />\n      <button onClick={clipboard.copy}>Copy</button>\n    </div>\n  );\n}\n```\n\nIn case the `copy` action fails, `useClipboard` will handle that gracefully by selecting the `target` input instead so that users can copy the text manually. This behavior can be disabled by passing `selectOnError: false` to the clipboard options.\n\n## Browser Support\n\n`use-clipboard-copy` is supported in all browsers that [supports the native clipboard APIs](https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/Interact_with_the_clipboard), including major browsers such as **Chrome, Firefox, Edge, Safari, IE11**.\n\nThis hook provides an `isSupported` method that you can use to check for browser support and update the UI accordingly:\n\n```jsx\nfunction ClipboardSupport() {\n  const clipboard = useClipboard();\n  return (\n    <div>\n      {clipboard.isSupported()\n        ? \"yay! copy-to-clipboard is supported\"\n        : \"meh. copy-to-clipboard is not supported\"}\n    </div>\n  );\n}\n```\n\n\n\n## API\n\n### `useClipboard(options?: UseClipboardOptions): ClipboardAPI`\n\n`use-clipboard-copy` exposes a named export `useClipboard` which is the hook function itself. It takes an optional options object, and returns an object to control the clipboard.\n\n```js\nimport { useClipboard } from 'use-clipboard-copy';\n\nfunction CopyText() {\n  const clipboard = useClipboard();\n  return (\n    // ...\n  );\n}\n```\n\n### `UseClipboardOptions`\n\n`useClipboard` takes an optional object with the following properties:\n\n- [`copiedTimeout?: number`](#copiedtimeout-number)\n- [`onSuccess?: () => void`](#onsuccess---void)\n- [`onError?: () => void`](#onerror---void)\n- [`selectOnCopy?: boolean`](#selectoncopy-boolean)\n- [`selectOnError?: boolean`](#selectonerror-boolean)\n\n#### `copiedTimeout?: number`\n\nThe duration in milliseconds used to toggled the [`copied`](#copied-boolean) state upon a successful copy action.\n\n#### `onSuccess?: () => void`\n\nA callback function that will be called upon a successful copy action.\n\n#### `onError?: () => void`\n\nA callback function that will be called when the copy action fails.\n\n#### `selectOnCopy?: boolean`\n\nDefaults to `false`.\n\nA boolean indicating whether the text of the [`target`](#target-reactrefobjectany) element (if set) will be selected upon a successful copy action.\n\n#### `selectOnError?: boolean`\n\nDefaults to `true`.\n\nA boolean indicating whether the text of the [`target`](#target-reactrefobjectany) element (if set) will be selected when the copy action fails.\n\n### `ClipboardAPI`\n\n`useClipboard` returns an object with the following properties:\n\n- [`copied: boolean`](#copied-boolean)\n- [`copy: (text?: string) => void`](#copy-text-string--void)\n- [`isSupported: () => boolean`](#issupported---boolean)\n- [`target: React.RefObject<any>`](#target-reactrefobjectany)\n\n#### `copy: (text?: string) => void`\n\nA method that will be used to preform the copy action. If it's used without passing a string, the `copy` action will use the text of the [`target`](#target-reactrefobjectany) element (if set).\n\n```jsx\n<input ref={clipboard.target} value=\"a text to copy\" />;\n<button onClick={clipboard.copy} />;\n```\n\nOptionally, `copy` takes a `string` to perform the copy action imperatively (programmatically). When this is used, the [`target`](#target-reactrefobjectany) element (if set) will be ignored.\n\n```jsx\n<button onClick={() => clipboard.copy('a text to copy')} />;\n```\n\n#### `target: React.RefObject<any>`\n\nA React Ref object used on input and textarea elements that holds the text to be copied.\n\n```jsx\n<input ref={clipboard.target} value=\"a text to copy\" />;\n```\n\n#### `isSupported: () => boolean`\n\nA function that returns a boolean indicating whether the browser supports the clipboard APIs. Useful to deterministically update the UI if the browser does not support the clipboard functionality for whatever reason.\n\n#### `copied: boolean`\n\nA boolean indicating whether the copy action was just performed. Must be used with the [`copiedTimeout`](#copiedtimeout-number) option. Useful to update the UI to display temporary success state.\n\n## Acknowledgements\n\nThis hook is powered by [clipboard-copy](https://github.com/feross/clipboard-copy), the lightweight copy to clipboard for the web.\n\n## License\n\nMIT\n","readmeFilename":"README.md","_id":"use-clipboard-copy@0.1.2-beta.0","_nodeVersion":"10.16.2","_npmVersion":"6.9.0","dist":{"integrity":"sha512-Y7CBn5dlehkmjwNDYFBx/H8ypmP88eK+zwWqmZvadcIy/dn7/F3ZjT77ZbwRc+sJ0rKkW2tCYc5tXmn9YvBgkQ==","shasum":"70fb4491f6fb648011cde22fe6c5e805a3d12d90","tarball":"https://registry.npmjs.org/use-clipboard-copy/-/use-clipboard-copy-0.1.2-beta.0.tgz","fileCount":7,"unpackedSize":16565,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJeNHzGCRA9TVsSAnZWagAAJcYP+gI3S4cmeg7U3zoTTZKL\n2kTjSpy2JI07jVscjuq5lZPoquCR+9OG0JKiYJyVfUrqDWv+nvu9l0jR6Dd1\noSqUEk5tHICegJZMSo2ygdVj33HZA/SRIVf8RWEgZ/UBEJKeEKDp72FigWTn\nBvOZO+1Hie2ZravPTRCvZsSlsTaA4vwrWXBz6ziSUOaV/k7o8ivofHufvhoV\ngV0j30RaaQ4SYqJqApScBuTDgiL+fx+tnu85y6dILBSknoIDwR3uTEiiaWTD\nxFtoB3wJPw6JCgInVlgT3YYNAShl0JAWDRBajZVEpR79uGyj5b69bioJAp1T\nTeZLsiDR8ir3xYA1OZ5IboGlhDteavJewm5grcnn3QqE2cREiQf8WRswZw5x\nrA/SQHYFBjEJjMYTk3u9vXRaip5BCIxlbkbgxN+n6fPxCPAONyQx8W0vNjXI\nHYSQoVxS+SAyAt25B67w1pmCHyAl0RS2EtNojH44ZROgP9+9fWSGRZi7v3hU\n3yi5Nndx8PBy2lZHh7o7TySiIpGvvOBHizemVJ6SAkn7/CA3HK1T1Lv6QrAs\ntmNbA0gbfbxRjzkP2I4s6E+4zUIHQM56nEszAm2GAuX/qVWLfxCwZgCvv2xU\nVbG2d41sX7G7H5QZBe31phpjWgXyoIF/sCE6cC4jO33WIgS6omagBoS7j6IW\nhM44\r\n=BzwR\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIDzoWwBNkXdIUTGjhkIuovpcZZHLp5MQIl7P4YI4nuP3AiAMouT9eSs7G8MrLUulgHAheDDdJTZPrcI9vkjh2+76Pg=="}]},"maintainers":[{"name":"wsmd","email":"dwaseem@icloud.com"}],"_npmUser":{"name":"wsmd","email":"dwaseem@icloud.com"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/use-clipboard-copy_0.1.2-beta.0_1580498118112_0.6210768650838943"},"_hasShrinkwrap":false},"0.1.2":{"name":"use-clipboard-copy","version":"0.1.2","description":"Lightweight copy to clipboard hook for React","main":"dist/index.js","types":"dist/index.d.ts","repository":{"type":"git","url":"git+https://github.com/wsmd/use-clipboard-copy.git"},"homepage":"https://github.com/wsmd/use-clipboard-copy","bugs":{"url":"https://github.com/wsmd/use-clipboard-copy/issues"},"author":{"name":"Waseem Dahman","email":"dwaseem@icloud.com"},"license":"MIT","scripts":{"typecheck":"tsc --noEmit","lint":"tslint --project .","test":"jest","test:coverage":"jest --coverage","test:all":"yarn typecheck && yarn lint && yarn test:coverage && yarn size","coveralls":"cat ./coverage/lcov.info | ./node_modules/coveralls/bin/coveralls.js","build":"tsc","prebuild":"rm -rf dist","prepack":"yarn test:all && yarn build","size":"yarn build --skipLibCheck && size-limit"},"keywords":["react","react-hooks","copy-to-clipboard","clipboard-js","copy","cut","hook"],"prettier":{"trailingComma":"all","singleQuote":true},"jest":{"watchPathIgnorePatterns":["dist"],"transform":{"^.+\\.tsx?$":"ts-jest"},"collectCoverageFrom":["src/**.ts"]},"size-limit":[{"path":"dist/*.js","limit":"800 B"}],"peerDependencies":{"react":"^16.8.0"},"dependencies":{"clipboard-copy":"^3.0.0"},"devDependencies":{"@types/jest":"^24.0.11","@types/react":"^16.8.10","coveralls":"^3.0.3","jest":"^24.7.0","react":"16.9.0-alpha.0","react-dom":"16.9.0-alpha.0","react-hooks-testing-library":"^0.4.0","react-testing-library":"^6.1.2","size-limit":"^1.0.1","ts-jest":"^24.0.2","tslint":"^5.15.0","typescript":"^3.4.1"},"gitHead":"8a1cae6c79f4fcb7e46da57542d14eb84873a587","_id":"use-clipboard-copy@0.1.2","_nodeVersion":"10.16.2","_npmVersion":"6.9.0","dist":{"integrity":"sha512-EkauxqyX+us4+Mfif/f61ew89EAOWIArqFpHR0jSG4SwwuDZzDAOeqO7gkK0vi+DQVADeB1RB3xqU3U0oOO3NQ==","shasum":"83b16292dfa8ea262be714252022a8b4ad1c28c5","tarball":"https://registry.npmjs.org/use-clipboard-copy/-/use-clipboard-copy-0.1.2.tgz","fileCount":7,"unpackedSize":16558,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJeNJGiCRA9TVsSAnZWagAA/JMP/3fbMFiWqgWDnAeszbeo\nSGBaGkOFvxZ6st9x50gUKVVl5N2ie5yyYL98wjEuv/aHvlUlq5OU21sxRlby\n/aM7SSptLNfheboNdv5Rs31cIn9XRoWNeIfsKel1UY0O26+vMQGcho/Sh/5L\nSzjg99G/wkUTve1i1J0yQi6Ijs9Qkgm0ORP2Sba8SyFxPEWLo7De0tIzuPz/\nHInKX/bVrTef351X7KL8YJcQ0oczFHmMe2EZ6z+HEMqdsBtBTluFFR/pqP87\nwaapDDjZus1sBvczsdrUfHXkmHUQY6ntznHq/ZpSH9Y5zmQoTaVDt87ReX/z\nrF7nquO2vnLTDfmO39okq9cJaTC9hvu1XqhHWmq7y5yCB0NLs/zsbW+Mv9PN\nkn0BrOe2FxS5xlC3Aa8U2NShRz9JuEsinyPAAVje6+rZyPV/qVe67uz/lecE\nV8BwORABHLM5NRzUJEtsazn026LSBeUSUAOU20fPpoEEGKplSZHcY9cJ+RWm\nqacGwRZh7vXI3CrwnZYCeZM13Fr/FHv/lswetYJ5hiEz/NTl7gByGQkH9/CI\nfPL51lHn8eGf+8bhpR/i/WSHVQbKWSjs/3bZIg/9IOmMn0f/BylldaU9Z39t\nFizahn8Fztz0wSWhPe3Vio11fnwdvJINpQ9Z1s/ok9OSQH8UFbWtaDw0x0xD\nEOzj\r\n=hM7C\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQCineUV6Uw4g+l/vaXzBVGWWLucr0wrK0ks2Og91XumxwIgQ2nD1cR+4zAbXU8besLsdJqNO+QdJa3OyJQ7MDuopp0="}]},"maintainers":[{"name":"wsmd","email":"dwaseem@icloud.com"}],"_npmUser":{"name":"wsmd","email":"dwaseem@icloud.com"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/use-clipboard-copy_0.1.2_1580503457668_0.7979559564152601"},"_hasShrinkwrap":false},"0.2.0-beta.2":{"name":"use-clipboard-copy","version":"0.2.0-beta.2","description":"Lightweight copy to clipboard hook for React","main":"dist/index.js","types":"dist/index.d.ts","repository":{"type":"git","url":"git+https://github.com/wsmd/use-clipboard-copy.git"},"homepage":"https://github.com/wsmd/use-clipboard-copy","bugs":{"url":"https://github.com/wsmd/use-clipboard-copy/issues"},"author":{"name":"Waseem Dahman","email":"dwaseem@icloud.com"},"license":"MIT","scripts":{"typecheck":"tsc --noEmit","lint":"tslint --project .","test":"jest","test:coverage":"jest --coverage","test:all":"yarn typecheck && yarn lint && yarn test:coverage && yarn size","coveralls":"cat ./coverage/lcov.info | ./node_modules/coveralls/bin/coveralls.js","build":"tsc","prebuild":"rm -rf dist","prepack":"yarn test:all && yarn build","size":"yarn build --skipLibCheck && size-limit"},"keywords":["react","react-hooks","copy-to-clipboard","clipboard-js","copy","cut","hook"],"prettier":{"trailingComma":"all","singleQuote":true},"jest":{"watchPathIgnorePatterns":["dist"],"transform":{"^.+\\.tsx?$":"ts-jest"},"collectCoverageFrom":["src/**.ts"]},"size-limit":[{"path":"dist/*.js","limit":"800 B"}],"peerDependencies":{"react":">=16.8.0"},"dependencies":{"clipboard-copy":"^3.0.0"},"devDependencies":{"@types/jest":"^24.0.11","@types/react":"^17.0.3","coveralls":"^3.0.3","jest":"^24.7.0","react":"^17.0.2","react-dom":"^17.0.2","react-hooks-testing-library":"^0.4.0","react-testing-library":"^6.1.2","size-limit":"^1.0.1","ts-jest":"^24.0.2","tslint":"^5.15.0","typescript":"^4.2.4"},"readme":"<h1 align=\"center\">\n  <img src=\"https://user-images.githubusercontent.com/2100222/55596467-9c054980-5716-11e9-8723-b8c286fcd9e3.png\" width=\"128\">\n  <br>\n  use-clipboard-copy\n</h1>\n\n<p align=\"center\">\n  <a href=\"https://www.npmjs.com/package/use-clipboard-copy\">\n    <img src=\"https://img.shields.io/npm/v/use-clipboard-copy.svg\" alt=\"Current Release\" />\n  </a>\n  <a href=\"https://www.npmjs.com/package/use-clipboard-copy\">\n    <img src=\"https://badgen.net/npm/dt/use-clipboard-copy\" alt=\"Downloads\" />\n  </a>\n  <a href=\"https://travis-ci.org/wsmd/use-clipboard-copy\">\n    <img src=\"https://travis-ci.org/wsmd/use-clipboard-copy.svg?branch=master\" alt=\"CI Build\">\n  </a>\n  <a href='https://coveralls.io/github/wsmd/use-clipboard-copy?branch=master'>\n    <img src='https://coveralls.io/repos/github/wsmd/use-clipboard-copy/badge.svg?branch=master' alt='Coverage Status' />\n  </a>\n  <a href=\"https://github.com/wsmd/use-clipboard-copy/blob/master/LICENSE\">\n    <img src=\"https://img.shields.io/github/license/wsmd/use-clipboard-copy.svg\" alt=\"Licence\">\n  </a>\n</p>\n\n<details>\n<summary>ðŸ“– Table of Contents</summary>\n<p>\n\n- [Motivation](#motivation)\n- [Getting Started](#getting-started)\n- [Usage](#usage)\n  - [Copying Text of Another Target Element](#copying-text-of-another-target-element)\n  - [Copying Text Imperatively (Without a Target Element)](#copying-text-imperatively-without-a-target-element)\n  - [Displaying a Temporary Success State](#displaying-a-temporary-success-state)\n  - [Handling Success and Errors](#handling-success-and-errors)\n- [Browser Support](#browser-support)\n- [API](#api)\n  - [`useClipboard(options?: UseClipboardOptions): ClipboardAPI`](#useclipboardoptions-useclipboardoptions-clipboardapi)\n  - [`UseClipboardOptions`](#useclipboardoptions)\n    - [`copiedTimeout?: number`](#copiedtimeout-number)\n    - [`onSuccess?: () => void`](#onsuccess---void)\n    - [`onError?: () => void`](#onerror---void)\n    - [`selectOnCopy?: boolean`](#selectoncopy-boolean)\n    - [`selectOnError?: boolean`](#selectonerror-boolean)\n  - [`ClipboardAPI`](#clipboardapi)\n    - [`copy: (text?: string) => void`](#copy-text-string--void)\n    - [`target: React.RefObject<any>`](#target-reactrefobjectany)\n    - [`isSupported: () => boolean`](#issupported---boolean)\n    - [`copied: boolean`](#copied-boolean)\n- [Acknowledgements](#acknowledgements)\n- [License](#license)\n\n</p>\n</details>\n\n## Motivation\n\nThere are various copy-to-clipboard solutions for Javascript â€“ really good ones, but getting them to work with React can feel a little odd... they don't feel very _React-y_.\n\n`use-clipboard-copy` is a **lightweight** (< 1KB) React hook that makes it possible to add a copy-to-clipboard functionality to your React application with very little code! A simple implementation looks like this:\n\n```js\nfunction CopyText() {\n  const clipboard = useClipboard();\n  return (\n    <div>\n      <input ref={clipboard.target} />\n      <button onClick={clipboard.copy}>Copy</button>\n    </div>\n  );\n}\n```\n\nP.S. You can do more than that with `use-clipboard-copy`. Keep reading!\n\n## Getting Started\n\nTo get started, add `use-clipboard-copy` to your project:\n\n```\nnpm install --save use-clipboard-copy\n```\n\nPlease note that `use-clipboard-copy` requires `react@^16.8.0` as a peer dependency.\n\n## Usage\n\n### Copying Text of Another Target Element\n\nA simple copy-to-clipboard interface consists of two parts:\n\n- The `target`, an element who holds the value to be copied, usually an input.\n- The `copy` action.\n\n```jsx\nimport { useClipboard } from 'use-clipboard-copy';\n\nexport default function PublicUrl({ url }) {\n  const clipboard = useClipboard();\n  return (\n    <div>\n      <input ref={clipboard.target} value={url} readOnly />\n      <button onClick={clipboard.copy}>Copy Link</button>\n    </div>\n  );\n}\n```\n\n### Copying Text Imperatively (Without a Target Element)\n\nIt is also possible to perform a copy action imperatively (programmatically). For example, a copy-to-clipboard interface may consist of a single copy button without any additional inputs or values displayed to the user. By passing a string to the `clipboard.copy` action, the specified string will be copied to the clipboard.\n\n```jsx\nimport { useClipboard } from 'use-clipboard-copy';\n\nexport default function PublicUrl({ id }) {\n  const clipboard = useClipboard();\n\n  const handleClick = React.useCallback(\n    () => {\n      const url = Utils.formatUrl({ query: { id } });\n      clipboard.copy(url); // programmatically copying a value\n    },\n    [clipboard.copy, id]\n  );\n\n  return (\n    <button onClick={handleClick}>Copy Link</button>\n  );\n}\n```\n\n### Displaying a Temporary Success State\n\nSometimes it can be helpful to notify the user that the text was successfully copied to the clipboard, usually by displaying a temporary \"Copied\" state after they trigger the copy action.\n\nBy passing the `copiedTimeout` option to `useClipboard()`, you can use `clipboard.copied` as a way to toggle the copied state in the UI.\n\n```jsx\nimport { useClipboard } from 'use-clipboard-copy';\n\nexport default function PublicUrl({ url }) {\n  const clipboard = useClipboard({\n    copiedTimeout: 600, // timeout duration in milliseconds\n  });\n  return (\n    <div>\n      <input ref={clipboard.target} value={url} readOnly />\n      <button onClick={clipboard.copy}>\n        {clipboard.copied ? 'Copied' : 'Copy Link'}\n      </button>\n    </div>\n  );\n}\n```\n\n### Handling Success and Errors\n\nCopy to clipboard in browsers can be tricky some times - there are various reasons that can contribute to preventing the copy action from working. Therefore, you should always handle such cases.\n\nBy passing an `onSuccess` and `onError` callbacks to the `useClipboard` options, you will be able to handle whether the `copy` action was performed successfully.\n\n```js\nfunction CopyText() {\n  const clipboard = useClipboard({\n    onSuccess() {\n      console.log('Text was copied successfully!')\n    },\n    onError() {\n      console.log('Failed to copy text!')\n    }\n  });\n  return (\n    <div>\n      <input ref={clipboard.target} />\n      <button onClick={clipboard.copy}>Copy</button>\n    </div>\n  );\n}\n```\n\nIn case the `copy` action fails, `useClipboard` will handle that gracefully by selecting the `target` input instead so that users can copy the text manually. This behavior can be disabled by passing `selectOnError: false` to the clipboard options.\n\n## Browser Support\n\n`use-clipboard-copy` is supported in all browsers that [supports the native clipboard APIs](https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/Interact_with_the_clipboard), including major browsers such as **Chrome, Firefox, Edge, Safari, IE11**.\n\nThis hook provides an `isSupported` method that you can use to check for browser support and update the UI accordingly:\n\n```jsx\nfunction ClipboardSupport() {\n  const clipboard = useClipboard();\n  return (\n    <div>\n      {clipboard.isSupported()\n        ? \"yay! copy-to-clipboard is supported\"\n        : \"meh. copy-to-clipboard is not supported\"}\n    </div>\n  );\n}\n```\n\n\n\n## API\n\n### `useClipboard(options?: UseClipboardOptions): ClipboardAPI`\n\n`use-clipboard-copy` exposes a named export `useClipboard` which is the hook function itself. It takes an optional options object, and returns an object to control the clipboard.\n\n```js\nimport { useClipboard } from 'use-clipboard-copy';\n\nfunction CopyText() {\n  const clipboard = useClipboard();\n  return (\n    // ...\n  );\n}\n```\n\n### `UseClipboardOptions`\n\n`useClipboard` takes an optional object with the following properties:\n\n- [`copiedTimeout?: number`](#copiedtimeout-number)\n- [`onSuccess?: () => void`](#onsuccess---void)\n- [`onError?: () => void`](#onerror---void)\n- [`selectOnCopy?: boolean`](#selectoncopy-boolean)\n- [`selectOnError?: boolean`](#selectonerror-boolean)\n\n#### `copiedTimeout?: number`\n\nThe duration in milliseconds used to toggled the [`copied`](#copied-boolean) state upon a successful copy action.\n\n#### `onSuccess?: () => void`\n\nA callback function that will be called upon a successful copy action.\n\n#### `onError?: () => void`\n\nA callback function that will be called when the copy action fails.\n\n#### `selectOnCopy?: boolean`\n\nDefaults to `false`.\n\nA boolean indicating whether the text of the [`target`](#target-reactrefobjectany) element (if set) will be selected upon a successful copy action.\n\n#### `selectOnError?: boolean`\n\nDefaults to `true`.\n\nA boolean indicating whether the text of the [`target`](#target-reactrefobjectany) element (if set) will be selected when the copy action fails.\n\n### `ClipboardAPI`\n\n`useClipboard` returns an object with the following properties:\n\n- [`copied: boolean`](#copied-boolean)\n- [`copy: (text?: string) => void`](#copy-text-string--void)\n- [`isSupported: () => boolean`](#issupported---boolean)\n- [`target: React.RefObject<any>`](#target-reactrefobjectany)\n\n#### `copy: (text?: string) => void`\n\nA method that will be used to preform the copy action. If it's used without passing a string, the `copy` action will use the text of the [`target`](#target-reactrefobjectany) element (if set).\n\n```jsx\n<input ref={clipboard.target} value=\"a text to copy\" />;\n<button onClick={clipboard.copy} />;\n```\n\nOptionally, `copy` takes a `string` to perform the copy action imperatively (programmatically). When this is used, the [`target`](#target-reactrefobjectany) element (if set) will be ignored.\n\n```jsx\n<button onClick={() => clipboard.copy('a text to copy')} />;\n```\n\n#### `target: React.RefObject<any>`\n\nA React Ref object used on input and textarea elements that holds the text to be copied.\n\n```jsx\n<input ref={clipboard.target} value=\"a text to copy\" />;\n```\n\n#### `isSupported: () => boolean`\n\nA function that returns a boolean indicating whether the browser supports the clipboard APIs. Useful to deterministically update the UI if the browser does not support the clipboard functionality for whatever reason.\n\n#### `copied: boolean`\n\nA boolean indicating whether the copy action was just performed. Must be used with the [`copiedTimeout`](#copiedtimeout-number) option. Useful to update the UI to display temporary success state.\n\n## Acknowledgements\n\nThis hook is powered by [clipboard-copy](https://github.com/feross/clipboard-copy), the lightweight copy to clipboard for the web.\n\n## License\n\nMIT\n","readmeFilename":"README.md","gitHead":"25398fdb1fa5110e090c4788ba09dc03d50ec46d","_id":"use-clipboard-copy@0.2.0-beta.2","_nodeVersion":"15.14.0","_npmVersion":"7.7.6","dist":{"integrity":"sha512-19sIyoixut5ZhpHfn8m+gK1MTuMoWMmKqFE+AIp1pU9BzRUl3hOeG3EgzAwybTKAoVb8IF15NlpUQOs/+8Brdw==","shasum":"b8798d3663b6c2020e56e2411e0122928e6ffbd4","tarball":"https://registry.npmjs.org/use-clipboard-copy/-/use-clipboard-copy-0.2.0-beta.2.tgz","fileCount":7,"unpackedSize":16870,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgePr7CRA9TVsSAnZWagAA8K8QAKNX6DUL57Jo4+ZixXjy\newTqJcK0gd76NQ9PG7LvtTRf7vemVF+B80Ioy5TuNLe74h5osvSyq0Fw+jHG\nimJPOWG7sfsE2p//CYPjrlD5rAQaz6JtkvHAOnFVacZQujRqADwQvAo/x/kM\nb+2z2v82lcB1ORZrO0kD4bKwyCnbArQMwY+FldnVWNbE96pWZSLhQ/Bhc321\nsml8/sBeHtN1RBOPkI3WAVC297bf5HmZvPWhaFdaBGgOftNzqBj5QH/MEMce\nYLoyykRN8JIL6Q84vLSDnteOyITbI7g2mmsanw9YZ8vrM5/gkj+9wDkJmWmy\nrVFlBqxfY2B/NS3veKtAMxJCwvvmvnOVrSgOEC5xT6nbLeanIszydJUtyk12\nqqirqh0sVHui4Q4mWIPzP1CIXQFkiSkYc/j+MGcj5Qb1XRNLqY+bjX+soM6H\nvqTAbNEIMUpsLMuwoZlvzTBtmjS81dxngS6PiQweqIZ3VYNwms2Gs6O9QEPm\np3NGJoHtmK6ZcnuB0sdKrMVxUVI1t0aodk5hcUg57oMWewnQ68QysPrYoWST\nqctpd3W2WPbqGETNOo0T5YwbHHaIk3u/zesdUsSAU0YWvkqNd23g5HqrZdvy\neHBRu61tUQiRdxURLxX2R/wPS9J9Gr9FMUMBquDIDMcU3Z3lEXmgrYV8wM66\nLY4I\r\n=KepC\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIEEbg7KJ3unB1En5v70m27fLM3Stkqe4/1euFuLJzr8LAiAaQo62XfZas5R+SlPzUrS8c7JX8exHxy2lJYpC/hKNHw=="}]},"_npmUser":{"name":"wsmd","email":"dwaseem@icloud.com"},"directories":{},"maintainers":[{"name":"wsmd","email":"dwaseem@icloud.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/use-clipboard-copy_0.2.0-beta.2_1618541307551_0.02282505407775748"},"_hasShrinkwrap":false},"0.2.0-beta.3":{"name":"use-clipboard-copy","version":"0.2.0-beta.3","description":"Lightweight copy to clipboard hook for React","main":"dist/index.js","types":"dist/index.d.ts","repository":{"type":"git","url":"git+https://github.com/wsmd/use-clipboard-copy.git"},"homepage":"https://use-clipboard-copy.vercel.app/","bugs":{"url":"https://github.com/wsmd/use-clipboard-copy/issues"},"author":{"name":"Waseem Dahman","email":"dwaseem@icloud.com"},"license":"MIT","scripts":{"typecheck":"tsc --noEmit","lint":"tslint --project .","test":"jest","test:coverage":"jest --coverage","test:all":"yarn typecheck && yarn lint && yarn test:coverage && yarn size","coveralls":"cat ./coverage/lcov.info | ./node_modules/coveralls/bin/coveralls.js","build":"tsc","prebuild":"rm -rf dist","prepack":"yarn test:all && yarn build","size":"yarn build --skipLibCheck && size-limit"},"keywords":["react","react-hooks","copy-to-clipboard","clipboard-js","copy","cut","hook"],"prettier":{"trailingComma":"all","singleQuote":true},"jest":{"watchPathIgnorePatterns":["dist"],"transform":{"^.+\\.tsx?$":"ts-jest"},"collectCoverageFrom":["src/**.ts"]},"size-limit":[{"path":"dist/*.js","limit":"800 B"}],"peerDependencies":{"react":">=16.8.0"},"dependencies":{"clipboard-copy":"^3.0.0"},"devDependencies":{"@types/jest":"^24.0.11","@types/react":"^17.0.3","coveralls":"^3.0.3","jest":"^24.7.0","react":"^17.0.2","react-dom":"^17.0.2","react-hooks-testing-library":"^0.4.0","react-testing-library":"^6.1.2","size-limit":"^1.0.1","ts-jest":"^24.0.2","tslint":"^5.15.0","typescript":"^4.2.4"},"gitHead":"5191c55860a8d84ca22afef29b482ae5371ed749","readme":"<h1 align=\"center\">\n  <img src=\"https://user-images.githubusercontent.com/2100222/55596467-9c054980-5716-11e9-8723-b8c286fcd9e3.png\" width=\"128\">\n  <br>\n  use-clipboard-copy\n</h1>\n\n<p align=\"center\">\n  <a href=\"https://www.npmjs.com/package/use-clipboard-copy\">\n    <img src=\"https://img.shields.io/npm/v/use-clipboard-copy.svg\" alt=\"Current Release\" />\n  </a>\n  <a href=\"https://www.npmjs.com/package/use-clipboard-copy\">\n    <img src=\"https://badgen.net/npm/dt/use-clipboard-copy\" alt=\"Downloads\" />\n  </a>\n  <a href=\"https://travis-ci.org/wsmd/use-clipboard-copy\">\n    <img src=\"https://travis-ci.org/wsmd/use-clipboard-copy.svg?branch=master\" alt=\"CI Build\">\n  </a>\n  <a href='https://coveralls.io/github/wsmd/use-clipboard-copy?branch=master'>\n    <img src='https://coveralls.io/repos/github/wsmd/use-clipboard-copy/badge.svg?branch=master' alt='Coverage Status' />\n  </a>\n  <a href=\"https://github.com/wsmd/use-clipboard-copy/blob/master/LICENSE\">\n    <img src=\"https://img.shields.io/github/license/wsmd/use-clipboard-copy.svg\" alt=\"Licence\">\n  </a>\n</p>\n\n<details>\n<summary>ðŸ“– Table of Contents</summary>\n<p>\n\n- [Motivation](#motivation)\n- [Getting Started](#getting-started)\n- [Usage](#usage)\n  - [Copying Text of Another Target Element](#copying-text-of-another-target-element)\n  - [Copying Text Imperatively (Without a Target Element)](#copying-text-imperatively-without-a-target-element)\n  - [Displaying a Temporary Success State](#displaying-a-temporary-success-state)\n  - [Handling Success and Errors](#handling-success-and-errors)\n- [Browser Support](#browser-support)\n- [API](#api)\n  - [`useClipboard(options?: UseClipboardOptions): ClipboardAPI`](#useclipboardoptions-useclipboardoptions-clipboardapi)\n  - [`UseClipboardOptions`](#useclipboardoptions)\n    - [`copiedTimeout?: number`](#copiedtimeout-number)\n    - [`onSuccess?: () => void`](#onsuccess---void)\n    - [`onError?: () => void`](#onerror---void)\n    - [`selectOnCopy?: boolean`](#selectoncopy-boolean)\n    - [`selectOnError?: boolean`](#selectonerror-boolean)\n  - [`ClipboardAPI`](#clipboardapi)\n    - [`copy: (text?: string) => void`](#copy-text-string--void)\n    - [`target: React.RefObject<any>`](#target-reactrefobjectany)\n    - [`isSupported: () => boolean`](#issupported---boolean)\n    - [`copied: boolean`](#copied-boolean)\n- [Acknowledgements](#acknowledgements)\n- [License](#license)\n\n</p>\n</details>\n\n## Motivation\n\nThere are various copy-to-clipboard solutions for Javascript â€“ really good ones, but getting them to work with React can feel a little odd... they don't feel very _React-y_.\n\n`use-clipboard-copy` is a **lightweight** (< 1KB) React hook that makes it possible to add a copy-to-clipboard functionality to your React application with very little code! A simple implementation looks like this:\n\n```js\nfunction CopyText() {\n  const clipboard = useClipboard();\n  return (\n    <div>\n      <input ref={clipboard.target} />\n      <button onClick={clipboard.copy}>Copy</button>\n    </div>\n  );\n}\n```\n\nP.S. You can do more than that with `use-clipboard-copy`. Keep reading!\n\n## Getting Started\n\nTo get started, add `use-clipboard-copy` to your project:\n\n```\nnpm install --save use-clipboard-copy\n```\n\nPlease note that `use-clipboard-copy` requires `react@^16.8.0` as a peer dependency.\n\n## Usage\n\n### Copying Text of Another Target Element\n\nA simple copy-to-clipboard interface consists of two parts:\n\n- The `target`, an element who holds the value to be copied, usually an input.\n- The `copy` action.\n\n```jsx\nimport { useClipboard } from 'use-clipboard-copy';\n\nexport default function PublicUrl({ url }) {\n  const clipboard = useClipboard();\n  return (\n    <div>\n      <input ref={clipboard.target} value={url} readOnly />\n      <button onClick={clipboard.copy}>Copy Link</button>\n    </div>\n  );\n}\n```\n\n### Copying Text Imperatively (Without a Target Element)\n\nIt is also possible to perform a copy action imperatively (programmatically). For example, a copy-to-clipboard interface may consist of a single copy button without any additional inputs or values displayed to the user. By passing a string to the `clipboard.copy` action, the specified string will be copied to the clipboard.\n\n```jsx\nimport { useClipboard } from 'use-clipboard-copy';\n\nexport default function PublicUrl({ id }) {\n  const clipboard = useClipboard();\n\n  const handleClick = React.useCallback(\n    () => {\n      const url = Utils.formatUrl({ query: { id } });\n      clipboard.copy(url); // programmatically copying a value\n    },\n    [clipboard.copy, id]\n  );\n\n  return (\n    <button onClick={handleClick}>Copy Link</button>\n  );\n}\n```\n\n### Displaying a Temporary Success State\n\nSometimes it can be helpful to notify the user that the text was successfully copied to the clipboard, usually by displaying a temporary \"Copied\" state after they trigger the copy action.\n\nBy passing the `copiedTimeout` option to `useClipboard()`, you can use `clipboard.copied` as a way to toggle the copied state in the UI.\n\n```jsx\nimport { useClipboard } from 'use-clipboard-copy';\n\nexport default function PublicUrl({ url }) {\n  const clipboard = useClipboard({\n    copiedTimeout: 600, // timeout duration in milliseconds\n  });\n  return (\n    <div>\n      <input ref={clipboard.target} value={url} readOnly />\n      <button onClick={clipboard.copy}>\n        {clipboard.copied ? 'Copied' : 'Copy Link'}\n      </button>\n    </div>\n  );\n}\n```\n\n### Handling Success and Errors\n\nCopy to clipboard in browsers can be tricky some times - there are various reasons that can contribute to preventing the copy action from working. Therefore, you should always handle such cases.\n\nBy passing an `onSuccess` and `onError` callbacks to the `useClipboard` options, you will be able to handle whether the `copy` action was performed successfully.\n\n```js\nfunction CopyText() {\n  const clipboard = useClipboard({\n    onSuccess() {\n      console.log('Text was copied successfully!')\n    },\n    onError() {\n      console.log('Failed to copy text!')\n    }\n  });\n  return (\n    <div>\n      <input ref={clipboard.target} />\n      <button onClick={clipboard.copy}>Copy</button>\n    </div>\n  );\n}\n```\n\nIn case the `copy` action fails, `useClipboard` will handle that gracefully by selecting the `target` input instead so that users can copy the text manually. This behavior can be disabled by passing `selectOnError: false` to the clipboard options.\n\n## Browser Support\n\n`use-clipboard-copy` is supported in all browsers that [supports the native clipboard APIs](https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/Interact_with_the_clipboard), including major browsers such as **Chrome, Firefox, Edge, Safari, IE11**.\n\nThis hook provides an `isSupported` method that you can use to check for browser support and update the UI accordingly:\n\n```jsx\nfunction ClipboardSupport() {\n  const clipboard = useClipboard();\n  return (\n    <div>\n      {clipboard.isSupported()\n        ? \"yay! copy-to-clipboard is supported\"\n        : \"meh. copy-to-clipboard is not supported\"}\n    </div>\n  );\n}\n```\n\n\n\n## API\n\n### `useClipboard(options?: UseClipboardOptions): ClipboardAPI`\n\n`use-clipboard-copy` exposes a named export `useClipboard` which is the hook function itself. It takes an optional options object, and returns an object to control the clipboard.\n\n```js\nimport { useClipboard } from 'use-clipboard-copy';\n\nfunction CopyText() {\n  const clipboard = useClipboard();\n  return (\n    // ...\n  );\n}\n```\n\n### `UseClipboardOptions`\n\n`useClipboard` takes an optional object with the following properties:\n\n- [`copiedTimeout?: number`](#copiedtimeout-number)\n- [`onSuccess?: () => void`](#onsuccess---void)\n- [`onError?: () => void`](#onerror---void)\n- [`selectOnCopy?: boolean`](#selectoncopy-boolean)\n- [`selectOnError?: boolean`](#selectonerror-boolean)\n\n#### `copiedTimeout?: number`\n\nThe duration in milliseconds used to toggled the [`copied`](#copied-boolean) state upon a successful copy action.\n\n#### `onSuccess?: () => void`\n\nA callback function that will be called upon a successful copy action.\n\n#### `onError?: () => void`\n\nA callback function that will be called when the copy action fails.\n\n#### `selectOnCopy?: boolean`\n\nDefaults to `false`.\n\nA boolean indicating whether the text of the [`target`](#target-reactrefobjectany) element (if set) will be selected upon a successful copy action.\n\n#### `selectOnError?: boolean`\n\nDefaults to `true`.\n\nA boolean indicating whether the text of the [`target`](#target-reactrefobjectany) element (if set) will be selected when the copy action fails.\n\n### `ClipboardAPI`\n\n`useClipboard` returns an object with the following properties:\n\n- [`copied: boolean`](#copied-boolean)\n- [`copy: (text?: string) => void`](#copy-text-string--void)\n- [`isSupported: () => boolean`](#issupported---boolean)\n- [`target: React.RefObject<any>`](#target-reactrefobjectany)\n\n#### `copy: (text?: string) => void`\n\nA method that will be used to preform the copy action. If it's used without passing a string, the `copy` action will use the text of the [`target`](#target-reactrefobjectany) element (if set).\n\n```jsx\n<input ref={clipboard.target} value=\"a text to copy\" />;\n<button onClick={clipboard.copy} />;\n```\n\nOptionally, `copy` takes a `string` to perform the copy action imperatively (programmatically). When this is used, the [`target`](#target-reactrefobjectany) element (if set) will be ignored.\n\n```jsx\n<button onClick={() => clipboard.copy('a text to copy')} />;\n```\n\n#### `target: React.RefObject<any>`\n\nA React Ref object used on input and textarea elements that holds the text to be copied.\n\n```jsx\n<input ref={clipboard.target} value=\"a text to copy\" />;\n```\n\n#### `isSupported: () => boolean`\n\nA function that returns a boolean indicating whether the browser supports the clipboard APIs. Useful to deterministically update the UI if the browser does not support the clipboard functionality for whatever reason.\n\n#### `copied: boolean`\n\nA boolean indicating whether the copy action was just performed. Must be used with the [`copiedTimeout`](#copiedtimeout-number) option. Useful to update the UI to display temporary success state.\n\n## Acknowledgements\n\nThis hook is powered by [clipboard-copy](https://github.com/feross/clipboard-copy), the lightweight copy to clipboard for the web.\n\n## License\n\nMIT\n","readmeFilename":"README.md","_id":"use-clipboard-copy@0.2.0-beta.3","_nodeVersion":"15.14.0","_npmVersion":"7.7.6","dist":{"integrity":"sha512-FPfgtgC09TZRIbUDC/w7JUDRDttLKAC5mUeY7piM9sxSNRjiPSORSJggrG9ZaIFb6JQlsnV//XQJQq4vJ/gNIg==","shasum":"97eb1e1614a27d247b2047c7e545ef015b1f2562","tarball":"https://registry.npmjs.org/use-clipboard-copy/-/use-clipboard-copy-0.2.0-beta.3.tgz","fileCount":7,"unpackedSize":16866,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgePzXCRA9TVsSAnZWagAAY/wP/Rn+lG12hIcp7XpFep81\n7Um3osmwZsFeuIoU+ynNSzv67873MnO6GeLfzxhGRO80CiEW53vpgCwvREi+\nKam9Xix/WqiE1Emr9QREvZIM4t+xeIsXCuurLF8PsWFJTh2Eaey9wP7OJL7I\ntxZBNZZ3JvZltBJrzYn9R77tVapsia33AEGMtv9GMCGsLbNT4Tmee4jf/lFR\naVt3JML5eemf0qFhyQzLR4LNqwerjYCjJBWTOY2dX14AMe1cjvZ6YchkfWIN\ncTQNvCtz8fhakD9wZcXSErpBQxsWMLtdiz1Nk0mmyixjUvyt1BDFrui/7O9g\neHkrW5IiN6vMf743bpqj75k2sGLR+UQu3bTvD5Y6ZD+t3mJUiyjriRUqCGFJ\nhds8I+wCxCwdeFYir1bWqkb0yKa3xl8I7D+7OlZ+Bh5mMz8xrSBL21htFmxH\naPo98GkNKdC3pxeA4xyrL4dvWbtSPEZ2K9TgvizwFNSA4Eo6aXpx4OMo1+vk\n/9xedgx1xTPc//RHi6/ErQLbHsDcThv1EQjvIjtvW1RrZh+3ZpzzIkxiMYHm\nSTZXrigTFTwxkW4/56/KaOajvnIpUrhv2Byo6stPkhONZmhZE3cWzDgsHozJ\nJKqrPTk1F/G4VErL974DKzoaCWGF1A9LFbynNCuQxHs7V98cbtOOaAuhZHzH\nk1I2\r\n=TPEz\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCr/PPsaY6wM22J+a6F0drzTu+C3lrWk4JzH9g+f79hGAIhAO13WIGFD6CgHioUwksoxCbhDAnamYoAFEIin4aszlaU"}]},"_npmUser":{"name":"wsmd","email":"dwaseem@icloud.com"},"directories":{},"maintainers":[{"name":"wsmd","email":"dwaseem@icloud.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/use-clipboard-copy_0.2.0-beta.3_1618541782651_0.5201553691782772"},"_hasShrinkwrap":false},"0.2.0":{"name":"use-clipboard-copy","version":"0.2.0","description":"Lightweight copy to clipboard hook for React","main":"dist/index.js","types":"dist/index.d.ts","repository":{"type":"git","url":"git+https://github.com/wsmd/use-clipboard-copy.git"},"homepage":"https://use-clipboard-copy.vercel.app/","bugs":{"url":"https://github.com/wsmd/use-clipboard-copy/issues"},"author":{"name":"Waseem Dahman","email":"dwaseem@icloud.com"},"license":"MIT","scripts":{"typecheck":"tsc --noEmit","lint":"tslint --project .","test":"jest","test:coverage":"jest --coverage","test:all":"yarn typecheck && yarn lint && yarn test:coverage && yarn size","coveralls":"cat ./coverage/lcov.info | ./node_modules/coveralls/bin/coveralls.js","build":"tsc","prebuild":"rm -rf dist","prepack":"yarn test:all && yarn build","size":"yarn build --skipLibCheck && size-limit"},"keywords":["react","react-hooks","copy-to-clipboard","clipboard-js","copy","cut","hook"],"prettier":{"trailingComma":"all","singleQuote":true},"jest":{"watchPathIgnorePatterns":["dist"],"transform":{"^.+\\.tsx?$":"ts-jest"},"collectCoverageFrom":["src/**.ts"]},"size-limit":[{"path":"dist/*.js","limit":"800 B"}],"peerDependencies":{"react":">=16.8.0"},"dependencies":{"clipboard-copy":"^3.0.0"},"devDependencies":{"@types/jest":"^24.0.11","@types/react":"^17.0.3","coveralls":"^3.0.3","jest":"^24.7.0","react":"^17.0.2","react-dom":"^17.0.2","react-hooks-testing-library":"^0.4.0","react-testing-library":"^6.1.2","size-limit":"^1.0.1","ts-jest":"^24.0.2","tslint":"^5.15.0","typescript":"^4.2.4"},"gitHead":"79c8f51811840f0db90237d91a07492a11189079","_id":"use-clipboard-copy@0.2.0","_nodeVersion":"15.14.0","_npmVersion":"7.7.6","dist":{"integrity":"sha512-f0PMMwZ2/Hh9/54L12capx4s6ASdd6edNJxg2OcqWVNM8BPvtOSmNFIN1Dg/q//fPp8MpUZceHfr7cnWOS0RxA==","shasum":"e1f31f2b21e369bc79b5d7b358e2c8aece6ef264","tarball":"https://registry.npmjs.org/use-clipboard-copy/-/use-clipboard-copy-0.2.0.tgz","fileCount":7,"unpackedSize":16859,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgeP3pCRA9TVsSAnZWagAAUnwQAJFQtRU4oC/zgUfjuHRC\nNce8QnBEZJXc0BB7BdQ6O/WvCvC+3jy+tO/oBXFGEVS3M+a8CEY4puRQKsvj\nan1rZDI8xLpdMIj/4En51g7rRLE3Fg9ooLE2mSp900PN4ip3DenznJISyjrf\nvD8RVn8yqd72kDgbSaM9ywIugF6csktRB5FqfI7wnDsHeVqfkqTUk9ulmjII\nMm8oRR7F4jMpkeI83lQeBbzC6YKJm/Y9E3uv8CN17yjwAv8daNoRYcfu8z2p\n+srDeT79nsMSx7+2ykkhuLeLekXRn5IlcpkYdurh9CzCXyA5uHPeQ9PKBWpG\n/3k4pTyAfvgl/co8pA4ber2czgU/uZTx/u+/z0FbLzkoXIMPPW6MNBtIPHma\n0n0MFjCyArM1NjeFPsBW/7sBEDNn726yoVSEwnsjSUy26bwfHd5P4qk3QHdo\nXt3IIFgSbc9Vz7GPphfMpvHA9l0rize0phC+y4SSTrTn0TM0szN8QYVZJWSz\n+XhoaraxIsecXNAB8LbX9A67DZKb0XNLZeF/Y6HTw3fS7Jw2FaAsCYM+v71e\nLZHfqq21j8EMNtawX+IMFA4FI1bwClubEcHKgRNSz9j3Hn0VJr0FYmHdTtFn\n4ADXBVvKqi2VOEFzPHFVxrXoghrXXDh4V2nlruAZ8/4yaanOy6fWemXsUwWi\nOih6\r\n=7BNv\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCDdPpFsjzyXvdY8ClDQkGjyp4P+MHGW7YRLv6N68sD+AIhAP1SDxEm0GceMw4WL2PxLep3ygvruhk2RW4zTlJUqgir"}]},"_npmUser":{"name":"wsmd","email":"dwaseem@icloud.com"},"directories":{},"maintainers":[{"name":"wsmd","email":"dwaseem@icloud.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/use-clipboard-copy_0.2.0_1618542056545_0.09853174774907192"},"_hasShrinkwrap":false}},"time":{"created":"2019-04-04T03:06:40.825Z","0.0.1":"2019-04-04T03:06:41.189Z","modified":"2022-05-22T21:56:08.005Z","0.1.0-beta.0":"2019-04-05T02:07:08.965Z","0.1.0-beta.1":"2019-04-06T00:58:58.773Z","0.1.0-beta.2":"2019-04-06T18:12:21.537Z","0.1.0-beta.3":"2019-04-06T22:07:56.935Z","0.1.0":"2019-04-07T04:58:45.516Z","0.1.1":"2019-07-17T18:04:11.646Z","0.2.0-beta.0":"2019-12-26T23:57:49.377Z","0.2.0-beta.1":"2019-12-27T00:19:58.307Z","0.1.2-beta.0":"2020-01-31T19:15:18.222Z","0.1.2":"2020-01-31T20:44:17.812Z","0.2.0-beta.2":"2021-04-16T02:48:27.690Z","0.2.0-beta.3":"2021-04-16T02:56:22.840Z","0.2.0":"2021-04-16T03:00:56.689Z"},"maintainers":[{"name":"wsmd","email":"dwaseem@icloud.com"}],"description":"Lightweight copy to clipboard hook for React","homepage":"https://use-clipboard-copy.vercel.app/","keywords":["react","react-hooks","copy-to-clipboard","clipboard-js","copy","cut","hook"],"repository":{"type":"git","url":"git+https://github.com/wsmd/use-clipboard-copy.git"},"author":{"name":"Waseem Dahman","email":"dwaseem@icloud.com"},"bugs":{"url":"https://github.com/wsmd/use-clipboard-copy/issues"},"license":"MIT","readme":"<h1 align=\"center\">\n  <img src=\"https://user-images.githubusercontent.com/2100222/55596467-9c054980-5716-11e9-8723-b8c286fcd9e3.png\" width=\"128\">\n  <br>\n  use-clipboard-copy\n</h1>\n\n<p align=\"center\">\n  <a href=\"https://www.npmjs.com/package/use-clipboard-copy\">\n    <img src=\"https://img.shields.io/npm/v/use-clipboard-copy.svg\" alt=\"Current Release\" />\n  </a>\n  <a href=\"https://www.npmjs.com/package/use-clipboard-copy\">\n    <img src=\"https://badgen.net/npm/dt/use-clipboard-copy\" alt=\"Downloads\" />\n  </a>\n  <a href=\"https://travis-ci.org/wsmd/use-clipboard-copy\">\n    <img src=\"https://travis-ci.org/wsmd/use-clipboard-copy.svg?branch=master\" alt=\"CI Build\">\n  </a>\n  <a href='https://coveralls.io/github/wsmd/use-clipboard-copy?branch=master'>\n    <img src='https://coveralls.io/repos/github/wsmd/use-clipboard-copy/badge.svg?branch=master' alt='Coverage Status' />\n  </a>\n  <a href=\"https://github.com/wsmd/use-clipboard-copy/blob/master/LICENSE\">\n    <img src=\"https://img.shields.io/github/license/wsmd/use-clipboard-copy.svg\" alt=\"Licence\">\n  </a>\n</p>\n\n<details>\n<summary>ðŸ“– Table of Contents</summary>\n<p>\n\n- [Motivation](#motivation)\n- [Getting Started](#getting-started)\n- [Usage](#usage)\n  - [Copying Text of Another Target Element](#copying-text-of-another-target-element)\n  - [Copying Text Imperatively (Without a Target Element)](#copying-text-imperatively-without-a-target-element)\n  - [Displaying a Temporary Success State](#displaying-a-temporary-success-state)\n  - [Handling Success and Errors](#handling-success-and-errors)\n- [Browser Support](#browser-support)\n- [API](#api)\n  - [`useClipboard(options?: UseClipboardOptions): ClipboardAPI`](#useclipboardoptions-useclipboardoptions-clipboardapi)\n  - [`UseClipboardOptions`](#useclipboardoptions)\n    - [`copiedTimeout?: number`](#copiedtimeout-number)\n    - [`onSuccess?: () => void`](#onsuccess---void)\n    - [`onError?: () => void`](#onerror---void)\n    - [`selectOnCopy?: boolean`](#selectoncopy-boolean)\n    - [`selectOnError?: boolean`](#selectonerror-boolean)\n  - [`ClipboardAPI`](#clipboardapi)\n    - [`copy: (text?: string) => void`](#copy-text-string--void)\n    - [`target: React.RefObject<any>`](#target-reactrefobjectany)\n    - [`isSupported: () => boolean`](#issupported---boolean)\n    - [`copied: boolean`](#copied-boolean)\n- [Acknowledgements](#acknowledgements)\n- [License](#license)\n\n</p>\n</details>\n\n## Motivation\n\nThere are various copy-to-clipboard solutions for Javascript â€“ really good ones, but getting them to work with React can feel a little odd... they don't feel very _React-y_.\n\n`use-clipboard-copy` is a **lightweight** (< 1KB) React hook that makes it possible to add a copy-to-clipboard functionality to your React application with very little code! A simple implementation looks like this:\n\n```js\nfunction CopyText() {\n  const clipboard = useClipboard();\n  return (\n    <div>\n      <input ref={clipboard.target} />\n      <button onClick={clipboard.copy}>Copy</button>\n    </div>\n  );\n}\n```\n\nP.S. You can do more than that with `use-clipboard-copy`. Keep reading!\n\n## Getting Started\n\nTo get started, add `use-clipboard-copy` to your project:\n\n```\nnpm install --save use-clipboard-copy\n```\n\nPlease note that `use-clipboard-copy` requires `react@^16.8.0` as a peer dependency.\n\n## Usage\n\n### Copying Text of Another Target Element\n\nA simple copy-to-clipboard interface consists of two parts:\n\n- The `target`, an element who holds the value to be copied, usually an input.\n- The `copy` action.\n\n```jsx\nimport { useClipboard } from 'use-clipboard-copy';\n\nexport default function PublicUrl({ url }) {\n  const clipboard = useClipboard();\n  return (\n    <div>\n      <input ref={clipboard.target} value={url} readOnly />\n      <button onClick={clipboard.copy}>Copy Link</button>\n    </div>\n  );\n}\n```\n\n### Copying Text Imperatively (Without a Target Element)\n\nIt is also possible to perform a copy action imperatively (programmatically). For example, a copy-to-clipboard interface may consist of a single copy button without any additional inputs or values displayed to the user. By passing a string to the `clipboard.copy` action, the specified string will be copied to the clipboard.\n\n```jsx\nimport { useClipboard } from 'use-clipboard-copy';\n\nexport default function PublicUrl({ id }) {\n  const clipboard = useClipboard();\n\n  const handleClick = React.useCallback(\n    () => {\n      const url = Utils.formatUrl({ query: { id } });\n      clipboard.copy(url); // programmatically copying a value\n    },\n    [clipboard.copy, id]\n  );\n\n  return (\n    <button onClick={handleClick}>Copy Link</button>\n  );\n}\n```\n\n### Displaying a Temporary Success State\n\nSometimes it can be helpful to notify the user that the text was successfully copied to the clipboard, usually by displaying a temporary \"Copied\" state after they trigger the copy action.\n\nBy passing the `copiedTimeout` option to `useClipboard()`, you can use `clipboard.copied` as a way to toggle the copied state in the UI.\n\n```jsx\nimport { useClipboard } from 'use-clipboard-copy';\n\nexport default function PublicUrl({ url }) {\n  const clipboard = useClipboard({\n    copiedTimeout: 600, // timeout duration in milliseconds\n  });\n  return (\n    <div>\n      <input ref={clipboard.target} value={url} readOnly />\n      <button onClick={clipboard.copy}>\n        {clipboard.copied ? 'Copied' : 'Copy Link'}\n      </button>\n    </div>\n  );\n}\n```\n\n### Handling Success and Errors\n\nCopy to clipboard in browsers can be tricky some times - there are various reasons that can contribute to preventing the copy action from working. Therefore, you should always handle such cases.\n\nBy passing an `onSuccess` and `onError` callbacks to the `useClipboard` options, you will be able to handle whether the `copy` action was performed successfully.\n\n```js\nfunction CopyText() {\n  const clipboard = useClipboard({\n    onSuccess() {\n      console.log('Text was copied successfully!')\n    },\n    onError() {\n      console.log('Failed to copy text!')\n    }\n  });\n  return (\n    <div>\n      <input ref={clipboard.target} />\n      <button onClick={clipboard.copy}>Copy</button>\n    </div>\n  );\n}\n```\n\nIn case the `copy` action fails, `useClipboard` will handle that gracefully by selecting the `target` input instead so that users can copy the text manually. This behavior can be disabled by passing `selectOnError: false` to the clipboard options.\n\n## Browser Support\n\n`use-clipboard-copy` is supported in all browsers that [supports the native clipboard APIs](https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/Interact_with_the_clipboard), including major browsers such as **Chrome, Firefox, Edge, Safari, IE11**.\n\nThis hook provides an `isSupported` method that you can use to check for browser support and update the UI accordingly:\n\n```jsx\nfunction ClipboardSupport() {\n  const clipboard = useClipboard();\n  return (\n    <div>\n      {clipboard.isSupported()\n        ? \"yay! copy-to-clipboard is supported\"\n        : \"meh. copy-to-clipboard is not supported\"}\n    </div>\n  );\n}\n```\n\n\n\n## API\n\n### `useClipboard(options?: UseClipboardOptions): ClipboardAPI`\n\n`use-clipboard-copy` exposes a named export `useClipboard` which is the hook function itself. It takes an optional options object, and returns an object to control the clipboard.\n\n```js\nimport { useClipboard } from 'use-clipboard-copy';\n\nfunction CopyText() {\n  const clipboard = useClipboard();\n  return (\n    // ...\n  );\n}\n```\n\n### `UseClipboardOptions`\n\n`useClipboard` takes an optional object with the following properties:\n\n- [`copiedTimeout?: number`](#copiedtimeout-number)\n- [`onSuccess?: () => void`](#onsuccess---void)\n- [`onError?: () => void`](#onerror---void)\n- [`selectOnCopy?: boolean`](#selectoncopy-boolean)\n- [`selectOnError?: boolean`](#selectonerror-boolean)\n\n#### `copiedTimeout?: number`\n\nThe duration in milliseconds used to toggled the [`copied`](#copied-boolean) state upon a successful copy action.\n\n#### `onSuccess?: () => void`\n\nA callback function that will be called upon a successful copy action.\n\n#### `onError?: () => void`\n\nA callback function that will be called when the copy action fails.\n\n#### `selectOnCopy?: boolean`\n\nDefaults to `false`.\n\nA boolean indicating whether the text of the [`target`](#target-reactrefobjectany) element (if set) will be selected upon a successful copy action.\n\n#### `selectOnError?: boolean`\n\nDefaults to `true`.\n\nA boolean indicating whether the text of the [`target`](#target-reactrefobjectany) element (if set) will be selected when the copy action fails.\n\n### `ClipboardAPI`\n\n`useClipboard` returns an object with the following properties:\n\n- [`copied: boolean`](#copied-boolean)\n- [`copy: (text?: string) => void`](#copy-text-string--void)\n- [`isSupported: () => boolean`](#issupported---boolean)\n- [`target: React.RefObject<any>`](#target-reactrefobjectany)\n\n#### `copy: (text?: string) => void`\n\nA method that will be used to preform the copy action. If it's used without passing a string, the `copy` action will use the text of the [`target`](#target-reactrefobjectany) element (if set).\n\n```jsx\n<input ref={clipboard.target} value=\"a text to copy\" />;\n<button onClick={clipboard.copy} />;\n```\n\nOptionally, `copy` takes a `string` to perform the copy action imperatively (programmatically). When this is used, the [`target`](#target-reactrefobjectany) element (if set) will be ignored.\n\n```jsx\n<button onClick={() => clipboard.copy('a text to copy')} />;\n```\n\n#### `target: React.RefObject<any>`\n\nA React Ref object used on input and textarea elements that holds the text to be copied.\n\n```jsx\n<input ref={clipboard.target} value=\"a text to copy\" />;\n```\n\n#### `isSupported: () => boolean`\n\nA function that returns a boolean indicating whether the browser supports the clipboard APIs. Useful to deterministically update the UI if the browser does not support the clipboard functionality for whatever reason.\n\n#### `copied: boolean`\n\nA boolean indicating whether the copy action was just performed. Must be used with the [`copiedTimeout`](#copiedtimeout-number) option. Useful to update the UI to display temporary success state.\n\n## Acknowledgements\n\nThis hook is powered by [clipboard-copy](https://github.com/feross/clipboard-copy), the lightweight copy to clipboard for the web.\n\n## License\n\nMIT\n","readmeFilename":"README.md"}